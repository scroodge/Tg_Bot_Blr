#!/usr/bin/env python3
"""
–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
"""

import os
import sys
import threading
import requests
import json
from typing import Optional

from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, MessageHandler, InlineQueryHandler, filters, ContextTypes
from telegram.request import HTTPXRequest
from uuid import uuid4
import httpx

ENV_PATH = ".env"

def load_or_ask_token() -> str:
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if token:
        return token.strip()

    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ .env
    if os.path.exists(ENV_PATH):
        with open(ENV_PATH, "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith("TELEGRAM_BOT_TOKEN="):
                    token = line.split("=", 1)[1].strip()
                    if token:
                        os.environ["TELEGRAM_BOT_TOKEN"] = token
                        return token

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º
    print("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather –∏ –Ω–∞–∂–º–∏—Ç–µ Enter:")
    token = input().strip()
    if not token:
        print("–¢–æ–∫–µ–Ω –ø—É—Å—Ç. –í—ã—Ö–æ–¥.")
        sys.exit(1)

    with open(ENV_PATH, "w", encoding="utf-8") as f:
        f.write(f"TELEGRAM_BOT_TOKEN={token}\n")
    os.environ["TELEGRAM_BOT_TOKEN"] = token
    return token

def get_proxy_config():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    proxy_url = os.environ.get("PROXY_URL")
    if proxy_url:
        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {proxy_url}")
        return {
            "proxy_url": proxy_url,
            "proxy_auth": None
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if os.path.exists(ENV_PATH):
        with open(ENV_PATH, "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith("PROXY_URL="):
                    proxy_url = line.split("=", 1)[1].strip()
                    if proxy_url:
                        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏ –∏–∑ .env: {proxy_url}")
                        return {
                            "proxy_url": proxy_url,
                            "proxy_auth": None
                        }
    
    return None

# –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–µ—Ä–µ–∑ Ollama
class OllamaTranslator:
    def __init__(self, model_name: str = "mistral:7b"):
        self.model_name = model_name
        self.base_url = "http://localhost:11434"
        self.test_connection()
    
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama"""
        try:
            response = requests.get(f"{self.base_url}/api/tags")
            if response.status_code == 200:
                models = response.json().get('models', [])
                model_names = [m['name'] for m in models]
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama —É—Å–ø–µ—à–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {model_names}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å
                if self.model_name not in model_names:
                    print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {self.model_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {model_names}")
                    if model_names:
                        self.model_name = model_names[0]
                        print(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {self.model_name}")
            else:
                print(f"‚ö†Ô∏è Ollama –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º {response.status_code}")
        except requests.exceptions.ConnectionError:
            print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ localhost:11434")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
    
    def change_model(self, new_model: str):
        """–°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏"""
        self.model_name = new_model
        print(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_model}")

    def translate_ru_to_be(self, text: str, max_len: int = 512) -> str:
        text = text.strip()
        if not text:
            return ""
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Mistral
            prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:

–†—É—Å—Å–∫–∏–π: {text}
–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π:"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama
            response = requests.post(
                f"{self.base_url}/api/generate",
                json={
                    "model": self.model_name,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.1,
                        "top_p": 0.8,
                        "max_tokens": max_len
                    }
                },
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                translation = result.get('response', '').strip()
                
                # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if translation.startswith("–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:"):
                    translation = translation[67:].strip()
                if translation.startswith("–†—É—Å—Å–∫–∏–π:"):
                    translation = translation[8:].strip()
                if translation.startswith("–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π:"):
                    translation = translation[12:].strip()
                if translation.startswith(":"):
                    translation = translation[1:].strip()
                
                return translation if translation else "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è"
            else:
                print(f"–û—à–∏–±–∫–∞ Ollama API: {response.status_code} - {response.text}")
                return f"–ü–∞–º—ã–ª–∫–∞ API: {response.status_code}"
                
        except requests.exceptions.Timeout:
            return "–ü–∞–º—ã–ª–∫–∞: –ø–µ—Ä–∞—û–∑—ã—Ö–æ–¥ —á–∞—Å—É —á–∞–∫–∞–Ω–Ω—è (60 —Å–µ–∫)"
        except requests.exceptions.ConnectionError:
            return "–ü–∞–º—ã–ª–∫–∞: –Ω—è–º–∞ –∑–ª—É—á—ç–Ω–Ω—è –∑ Ollama"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É: {e}"

# Fallback –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
class FallbackTranslator:
    def __init__(self):
        self.translations = {
            "–ø—Ä–∏–≤–µ—Ç": "–ø—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ",
            "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ": "–¥–∞–±—Ä—ã–¥–∑–µ–Ω—å",
            "—Å–ø–∞—Å–∏–±–æ": "–¥–∑—è–∫—É–π",
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞": "–∫–∞–ª—ñ –ª–∞—Å–∫–∞",
            "–¥–∞": "—Ç–∞–∫",
            "–Ω–µ—Ç": "–Ω–µ",
            "—Ö–æ—Ä–æ—à–æ": "–¥–æ–±—Ä–∞",
            "–ø–ª–æ—Ö–æ": "–¥—Ä—ç–Ω–Ω–∞",
            "–∫–∞–∫ –¥–µ–ª–∞": "—è–∫ —Å–ø—Ä–∞–≤—ã",
            "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è": "–¥–∞ –ø–∞–±–∞—á—ç–Ω–Ω—è"
        }
    
    def translate_ru_to_be(self, text: str, max_len: int = 512) -> str:
        text = text.strip().lower()
        if not text:
            return ""
        
        if text in self.translations:
            return self.translations[text]
        
        for ru, be in self.translations.items():
            if ru in text:
                return f"–ß–∞—Å—Ç–∫–æ–≤—ã –ø–µ—Ä–∞–∫–ª–∞–¥: {be} (–¥–ª—è '{ru}')"
        
        return "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã —û –±–∞–∑–µ. –ü–∞—Å–ø—Ä–∞–±—É–π—Ü–µ —ñ–Ω—à—ã —Ç—ç–∫—Å—Ç."

translator: Optional[OllamaTranslator] = None
fallback_translator: Optional[FallbackTranslator] = None
translator_lock = threading.Lock()

async def ensure_translator():
    global translator, fallback_translator
    
    if translator is None:
        with translator_lock:
            if translator is None:
                try:
                    translator = OllamaTranslator()
                    fallback_translator = FallbackTranslator()
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Ollama: {e}")
                    translator = None
                    fallback_translator = FallbackTranslator()
    
    return translator, fallback_translator

# –ö–æ–º–∞–Ω–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "–ü—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ! –Ø –ø–µ—Ä–∞–∫–ª–∞–¥–∞—é –∑ —Ä—É—Å–∫–∞–π –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é ü™Ñ\n\n"
        "‚Ä¢ –ù–∞–ø—ñ—à—ã—Ü–µ –º–Ω–µ —Ç—ç–∫—Å—Ç ‚Äî —è –∞–¥–∫–∞–∂—É –ø–µ—Ä–∞–∫–ª–∞–¥–∞–º.\n"
        "‚Ä¢ –£ –ª—é–±—ã–º —á–∞—Ü–µ —û–≤—è–¥–∑—ñ—Ü–µ: @"
        f"{(await context.bot.get_me()).username} –≤–∞—à —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç ‚Äî —ñ —û—Å—Ç–∞—û—Ü–µ –≤—ã–Ω—ñ–∫.\n\n"
        "–ö–∞–º–∞–Ω–¥—ã:\n"
        "/start - –ø–∞—á–∞—Ç–∞–∫\n"
        "/help - –¥–∞–ø–∞–º–æ–≥–∞\n"
        "/status - —Å—Ç–∞—Ç—É—Å Ollama"
    )
    await update.message.reply_text(msg)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–æ—Å—Ç–∞ –¥–∞—à–ª—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç ‚Äî —è –ø–µ—Ä–∞–∫–ª–∞–¥—É –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é.\n"
        "–Ü–Ω–ª–∞–π–Ω: @–Ü–º—è–ë–æ—Ç–∞ –≤–∞—à —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç.\n\n"
        "–ö–∞–º–∞–Ω–¥—ã:\n"
        "/status - —Å—Ç–∞—Ç—É—Å Ollama"
    )

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get("http://localhost:11434/api/tags", timeout=10)
        if response.status_code == 200:
            models = response.json().get('models', [])
            if models:
                model_list = "\n".join([f"‚Ä¢ {m['name']}" for m in models])
                msg = f"‚úÖ Ollama –ø—Ä–∞—Ü—É–µ\n\n–î–æ—Å—Ç—É–ø–Ω—ã—è –º–∞–¥—ç–ª—ñ:\n{model_list}"
            else:
                msg = "‚úÖ Ollama –ø—Ä–∞—Ü—É–µ, –∞–ª–µ –º–∞–¥—ç–ª—ñ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"
        else:
            msg = f"‚ö†Ô∏è Ollama –∞–¥–∫–∞–∑–∞—û –∑ –∫–æ–¥–∞–º {response.status_code}"
    except requests.exceptions.ConnectionError:
        msg = "‚ùå –ù–µ —û–¥–∞–µ—Ü—Ü–∞ –∑–ª—É—á—ã—Ü—Ü–∞ –∑ Ollama\nüí° –ó–∞–ø—É—Å—Ü—ñ—Ü–µ: ollama serve"
    except Exception as e:
        msg = f"‚ùå –ü–∞–º—ã–ª–∫–∞: {e}"
    
    await update.message.reply_text(msg)

# –ü–µ—Ä–µ–≤–æ–¥ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    ollama_tr, fallback_tr = await ensure_translator()
    
    wait_message = await update.message.reply_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥...")
    
    try:
        if ollama_tr:
            be = ollama_tr.translate_ru_to_be(text)
            if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞"):
                await wait_message.delete()
                await update.message.reply_text(be)
                return
        
        be = fallback_tr.translate_ru_to_be(text)
        if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
            be = "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è. –ü–∞—Å–ø—Ä–∞–±—É–π—Ü–µ —ñ–Ω—à—ã —Ç—ç–∫—Å—Ç."
        
        await wait_message.delete()
        await update.message.reply_text(be)
        
    except Exception as e:
        await wait_message.delete()
        await update.message.reply_text(f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É: {e}")

# –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º
async def on_inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = (update.inline_query.query or "").strip()
    if not query:
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–£–≤—è–¥–∑—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç",
                input_message_content=InputTextMessageContent("–£–≤—è–¥–∑—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É."),
                description="–Ø –ø–µ—Ä–∞–∫–ª–∞–¥—É –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é"
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)
        return

    ollama_tr, fallback_tr = await ensure_translator()
    
    try:
        if ollama_tr:
            be = ollama_tr.translate_ru_to_be(query)
            if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞"):
                results = [
                    InlineQueryResultArticle(
                        id=str(uuid4()),
                        title="–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é",
                        input_message_content=InputTextMessageContent(be),
                        description=be[:120]
                    )
                ]
                await update.inline_query.answer(results, cache_time=0, is_personal=True)
                return
        
        be = fallback_tr.translate_ru_to_be(query)
        if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
            be = "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è"
        
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é (Fallback)",
                input_message_content=InputTextMessageContent(be),
                description=be[:120]
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)
        
    except Exception as e:
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É",
                input_message_content=InputTextMessageContent(f"–ü–∞–º—ã–ª–∫–∞: {e}"),
                description="–ü—Ä–∞–≤–µ—Ä—Ü–µ —Ç—ç–∫—Å—Ç —ñ –ø–∞—Å–ø—Ä–∞–±—É–π—Ü–µ –∑–Ω–æ—û"
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)

def main():
    token = load_or_ask_token()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
    proxy_config = get_proxy_config()
    
    if proxy_config:
        # –°–æ–∑–¥–∞–µ–º HTTPXRequest —Å –ø—Ä–æ–∫—Å–∏
        request = HTTPXRequest(
            proxy_url=proxy_config["proxy_url"],
            proxy_auth=proxy_config["proxy_auth"]
        )
        app = Application.builder().token(token).request(request).build()
        print("üîß –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–æ–∫—Å–∏")
    else:
        app = Application.builder().token(token).build()
        print("üåê –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        if "NetworkError" in str(context.error) or "httpx.ReadError" in str(context.error):
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–∫—Å–∏.")

    app.add_error_handler(error_handler)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(InlineQueryHandler(on_inline_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–±–µ—Ä–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω–∞: ollama serve")
    
    if not proxy_config:
        print("\nüí° –ï—Å–ª–∏ Telegram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        print("PROXY_URL=http://your-proxy:port")
        print("–∏–ª–∏")
        print("PROXY_URL=socks5://your-proxy:port")
    
    try:
        app.run_polling(
            close_loop=False,
            drop_pending_updates=True,
            allowed_updates=["message", "inline_query"]
        )
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")

if __name__ == "__main__":
    main()
