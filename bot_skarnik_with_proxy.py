#!/usr/bin/env python3
"""
–í–µ—Ä—Å–∏—è bot_skarnik.py —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
"""

import os
import sys
import threading
import requests
import re
import time
from typing import Optional
from urllib.parse import quote

from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, MessageHandler, InlineQueryHandler, filters, ContextTypes
from telegram.request import HTTPXRequest
from uuid import uuid4

ENV_PATH = ".env"

def load_or_ask_token() -> str:
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if token:
        return token.strip()

    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ .env
    if os.path.exists(ENV_PATH):
        with open(ENV_PATH, "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith("TELEGRAM_BOT_TOKEN="):
                    token = line.split("=", 1)[1].strip()
                    if token:
                        os.environ["TELEGRAM_BOT_TOKEN"] = token
                        return token

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º
    print("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather –∏ –Ω–∞–∂–º–∏—Ç–µ Enter:")
    token = input().strip()
    if not token:
        print("–¢–æ–∫–µ–Ω –ø—É—Å—Ç. –í—ã—Ö–æ–¥.")
        sys.exit(1)

    with open(ENV_PATH, "w", encoding="utf-8") as f:
        f.write(f"TELEGRAM_BOT_TOKEN={token}\n")
    os.environ["TELEGRAM_BOT_TOKEN"] = token
    return token

def get_proxy_config():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    proxy_url = os.environ.get("PROXY_URL")
    if proxy_url:
        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {proxy_url}")
        return {
            "proxy_url": proxy_url,
            "proxy_auth": None
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if os.path.exists(ENV_PATH):
        with open(ENV_PATH, "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith("PROXY_URL="):
                    proxy_url = line.split("=", 1)[1].strip()
                    if proxy_url:
                        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏ –∏–∑ .env: {proxy_url}")
                        return {
                            "proxy_url": proxy_url,
                            "proxy_auth": None
                        }
    
    return None

# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω-—Å–ª–æ–≤–∞—Ä—å Skarnik
class SkarnikTranslator:
    def __init__(self):
        self.base_url = "https://www.skarnik.by/search"
        self.session = requests.Session()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
        print("‚úÖ Skarnik –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def translate_ru_to_be(self, text: str, max_len: int = 512) -> str:
        text = text.strip()
        if not text:
            return ""
        
        # Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        max_retries = 3
        retry_delay = 1
        
        for attempt in range(max_retries):
            try:
                # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è URL
                encoded_text = quote(text)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
                search_url = f"{self.base_url}?term={encoded_text}&lang=rus"
                
                if attempt == 0:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –ø–æ–ø—ã—Ç–∫—É
                    print(f"üîç –ò—â—É –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è: {text}")
                    print(f"üì° URL: {search_url}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout
                response = self.session.get(
                    search_url, 
                    timeout=15,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
                    allow_redirects=True
                )
                response.raise_for_status()
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                translation = self._parse_skarnik_response(response.text, text)
                
                if translation:
                    return translation
                else:
                    return f"–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã –¥–ª—è: {text}"
                    
            except requests.exceptions.Timeout:
                if attempt < max_retries - 1:
                    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries}...")
                    time.sleep(retry_delay)
                    retry_delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    continue
                return "–ü–∞–º—ã–ª–∫–∞: –ø–µ—Ä–∞—û–∑—ã—Ö–æ–¥ —á–∞—Å—É —á–∞–∫–∞–Ω–Ω—è"
                
            except requests.exceptions.ConnectionError:
                if attempt < max_retries - 1:
                    print(f"üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries}...")
                    time.sleep(retry_delay)
                    retry_delay *= 2
                    continue
                return "–ü–∞–º—ã–ª–∫–∞: –Ω—è–º–∞ –∑–ª—É—á—ç–Ω–Ω—è –∑ Skarnik"
                
            except requests.exceptions.HTTPError as e:
                if e.response.status_code == 429:  # Too Many Requests
                    if attempt < max_retries - 1:
                        print(f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥–µ–º {retry_delay}—Å...")
                        time.sleep(retry_delay)
                        retry_delay *= 2
                        continue
                    return "–ü–∞–º—ã–ª–∫–∞: –∑–∞–Ω–∞–¥—Ç–∞ —à–º–∞—Ç –∑–∞–ø—ã—Ç–∞—û"
                else:
                    return f"–ü–∞–º—ã–ª–∫–∞ HTTP: {e.response.status_code}"
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                return f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É: {e}"
        
        return "–ü–∞–º—ã–ª–∫–∞: –Ω–µ —û–¥–∞–ª–æ—Å—è –∞—Ç—Ä—ã–º–∞—Ü—å –ø–µ—Ä–∞–∫–ª–∞–¥"

    def _parse_skarnik_response(self, html_content: str, original_text: str) -> str:
        """–ü–∞—Ä—Å–∏—Ç HTML –æ—Ç–≤–µ—Ç –æ—Ç Skarnik –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥"""
        try:
            # –ò—â–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ HTML
            # –û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å id="trn"
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ trn
            trn_pattern = r'<p id="trn">(.*?)</p>'
            match = re.search(trn_pattern, html_content, re.DOTALL)
            if match:
                trn_content = match.group(1)
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:")
                main_translation = re.search(r'<font size="\+2" color="831b03">([^<]+)</font>', trn_content)
                if main_translation:
                    return main_translation.group(1).strip()
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: –∏—â–µ–º –ø–µ—Ä–≤–æ–µ –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ
                belarusian_word = re.search(r'<font color="5f5f5f"><strong>[^<]+</strong> ‚Äî ([^<]+)</font>', trn_content)
                if belarusian_word:
                    return belarusian_word.group(1).strip()
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò—â–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ h1
            h1_pattern = r'<h1><span id="src">[^<]+</span></h1>\s*<p>–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:</p>\s*<p id="trn">(.*?)</p>'
            match = re.search(h1_pattern, html_content, re.DOTALL)
            if match:
                trn_content = match.group(1)
                # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥
                main_translation = re.search(r'<font size="\+2" color="831b03">([^<]+)</font>', trn_content)
                if main_translation:
                    return main_translation.group(1).strip()
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ò—â–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            table_pattern = r'<td[^>]*>([^<]+)</td>'
            matches = re.findall(table_pattern, html_content)
            
            # –ò—â–µ–º –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ (–æ–±—ã—á–Ω–æ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü)
            if len(matches) >= 2:
                for i in range(1, len(matches), 2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä—É—Å—Å–∫–∏–π, –±–µ—Ä–µ–º –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π
                    if matches[i].strip() and matches[i].strip() != original_text:
                        return matches[i].strip()
            
            # –í–∞—Ä–∏–∞–Ω—Ç 4: –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö div'–∞—Ö
            div_pattern = r'<div[^>]*class="[^"]*translation[^"]*"[^>]*>([^<]+)</div>'
            match = re.search(div_pattern, html_content)
            if match:
                return match.group(1).strip()
            
            # –í–∞—Ä–∏–∞–Ω—Ç 5: –ò—â–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
            marker_pattern = r'–ü–µ—Ä–µ–≤–æ–¥[^:]*:\s*([^<\n]+)'
            match = re.search(marker_pattern, html_content)
            if match:
                return match.group(1).strip()
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è: {original_text}")
            print(f"üìÑ HTML —Ñ—Ä–∞–≥–º–µ–Ω—Ç: {html_content[:1000]}...")
            return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
            return None

# Fallback –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –±–∞–∑–æ–≤—ã–º —Å–ª–æ–≤–∞—Ä–µ–º
class FallbackTranslator:
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        self.translations = {
            "–ø—Ä–∏–≤–µ—Ç": "–ø—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ",
            "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ": "–¥–∞–±—Ä—ã–¥–∑–µ–Ω—å",
            "—Å–ø–∞—Å–∏–±–æ": "–¥–∑—è–∫—É–π",
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞": "–∫–∞–ª—ñ –ª–∞—Å–∫–∞",
            "–¥–∞": "—Ç–∞–∫",
            "–Ω–µ—Ç": "–Ω–µ",
            "—Ö–æ—Ä–æ—à–æ": "–¥–æ–±—Ä–∞",
            "–ø–ª–æ—Ö–æ": "–¥—Ä—ç–Ω–Ω–∞",
            "–∫–∞–∫ –¥–µ–ª–∞": "—è–∫ —Å–ø—Ä–∞–≤—ã",
            "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è": "–¥–∞ –ø–∞–±–∞—á—ç–Ω–Ω—è",
            "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç": "—è–∫ —Ü—è–±–µ –∑–∞–≤—É—Ü—å",
            "–º–µ–Ω—è –∑–æ–≤—É—Ç": "–º—è–Ω–µ –∑–∞–≤—É—Ü—å",
            "–≥–¥–µ —Ç—ã –∂–∏–≤–µ—à—å": "–¥–∑–µ —Ç—ã –∂—ã–≤–µ—à",
            "—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç": "–∫–æ–ª—å–∫—ñ —Ç–∞–±–µ –≥–∞–¥–æ—û",
            "–Ω–µ –Ω–∞–¥–æ": "–Ω–µ —Ç—Ä—ç–±–∞",
            "–≤ –∫—Ä–æ–≤–∞—Ç–∏": "—É –ø–∞—Å—Ü–µ–ª—ñ",
            "—Ç–∞–∫ —Ö–æ—Ä–æ—à–æ": "—Ç–∞–∫ –¥–æ–±—Ä–∞",
            "–º–æ—è —Ö–æ—Ä–æ—à–∞—è": "–º–∞—è –¥–∞—Ä–∞–≥–∞—è",
            "–ª—é–±–ª—é —Ç–µ–±—è": "–∫–∞—Ö–∞—é —Ü—è–±–µ",
            "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏": "—Å–ø–∞–∫–æ–π–Ω–∞–π –Ω–æ—á—ã",
            "–∫–∞–∫ –¥–µ–ª–∞": "—è–∫ —Å–ø—Ä–∞–≤—ã",
            "—á—Ç–æ –¥–µ–ª–∞–µ—à—å": "—à—Ç–æ —Ä–æ–±—ñ—à",
            "–≥–¥–µ —Ç—ã": "–¥–∑–µ —Ç—ã",
            "–∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—à—å": "–∫–∞–ª—ñ –ø—Ä—ã–π–¥–∑–µ—à"
        }
    
    def translate_ru_to_be(self, text: str, max_len: int = 512) -> str:
        text = text.strip().lower()
        if not text:
            return ""
        
        # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if text in self.translations:
            return self.translations[text]
        
        # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for ru, be in self.translations.items():
            if ru in text:
                return f"–ß–∞—Å—Ç–∫–æ–≤—ã –ø–µ—Ä–∞–∫–ª–∞–¥: {be} (–¥–ª—è '{ru}')"
        
        return "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã —û –±–∞–∑–µ. –ü–∞—Å–ø—Ä–∞–±—É–π—Ü–µ —ñ–Ω—à—ã —Ç—ç–∫—Å—Ç."

translator: Optional[SkarnikTranslator] = None
fallback_translator: Optional[FallbackTranslator] = None
translator_lock = threading.Lock()

async def ensure_translator():
    global translator, fallback_translator
    
    if translator is None:
        with translator_lock:
            if translator is None:
                try:
                    translator = SkarnikTranslator()
                    fallback_translator = FallbackTranslator()
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Skarnik –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫: {e}")
                    print("–ò—Å–ø–æ–ª—å–∑—É—é fallback –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫...")
                    translator = None
                    fallback_translator = FallbackTranslator()
    
    return translator, fallback_translator

# –ö–æ–º–∞–Ω–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "–ü—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ! –Ø –ø–µ—Ä–∞–∫–ª–∞–¥–∞—é –∑ —Ä—É—Å–∫–∞–π –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é –ø—Ä–∞–∑ Skarnik üéØ\n\n"
        "‚Ä¢ –ù–∞–ø—ñ—à—ã—Ü–µ –º–Ω–µ —Ç—ç–∫—Å—Ç ‚Äî —è –∞–¥–∫–∞–∂—É –ø–µ—Ä–∞–∫–ª–∞–¥–∞–º.\n"
        "‚Ä¢ –£ –ª—é–±—ã–º —á–∞—Ü–µ —û–≤—è–¥–∑—ñ—Ü–µ: @"
        f"{(await context.bot.get_me()).username} –≤–∞—à —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç ‚Äî —ñ —û—Å—Ç–∞—û—Ü–µ –≤—ã–Ω—ñ–∫.\n\n"
        "–ö—Ä—ã–Ω—ñ—Ü–∞: –æ–Ω–ª–∞–π–Ω-—Å–ª–æ—û–Ω—ñ–∫ Skarnik (107,141 —Å–ª–æ–≤–∞).\n"
        "–£ –≤—ã–ø–∞–¥–∫—É –ø–∞–º—ã–ª–∫—ñ –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ fallback –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫.\n\n"
        "–ö–∞–º–∞–Ω–¥—ã:\n"
        "/start - –ø–∞—á–∞—Ç–∞–∫\n"
        "/help - –¥–∞–ø–∞–º–æ–≥–∞\n"
        "/status - —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫–∞"
    )
    await update.message.reply_text(msg)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–æ—Å—Ç–∞ –¥–∞—à–ª—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç ‚Äî —è –ø–µ—Ä–∞–∫–ª–∞–¥—É –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é.\n"
        "–Ü–Ω–ª–∞–π–Ω: @–Ü–º—è–ë–æ—Ç–∞ –≤–∞—à —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç.\n\n"
        "–ë–æ—Ç –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ –æ–Ω–ª–∞–π–Ω-—Å–ª–æ—û–Ω—ñ–∫ Skarnik –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É.\n"
        "–ö–∞–º–∞–Ω–¥—ã:\n"
        "/status - —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫–∞"
    )

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"""
    global translator
    
    if translator:
        msg = "‚úÖ Skarnik –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫ –ø—Ä–∞—Ü—É–µ\n\n"
        msg += "üìö –ë–∞–∑–∞: 107,141 —Å–ª–æ–≤–∞\n"
        msg += "üåê –ö—Ä—ã–Ω—ñ—Ü–∞: https://www.skarnik.by/\n"
        msg += "‚ö° –•—É—Ç–∫–∞—Å—Ü—å: –æ–Ω–ª–∞–π–Ω –ø–µ—Ä–∞–∫–ª–∞–¥"
    else:
        msg = "‚ùå Skarnik –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫ –Ω–µ –¥–∞—Å—Ç—É–ø–Ω—ã\nüí° –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ fallback –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫"
    
    await update.message.reply_text(msg)

# –ü–µ—Ä–µ–≤–æ–¥ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    skarnik_tr, fallback_tr = await ensure_translator()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    wait_message = await update.message.reply_text("üîç –®—É–∫–∞—é –ø–µ—Ä–∞–∫–ª–∞–¥ —É Skarnik...")
    
    try:
        if skarnik_tr:
            # –ü—Ä–æ–±—É–µ–º Skarnik –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
            be = skarnik_tr.translate_ru_to_be(text)
            if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞") and not be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                await wait_message.delete()
                await update.message.reply_text(be)
                return
        
        # –ï—Å–ª–∏ Skarnik –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        be = fallback_tr.translate_ru_to_be(text)
        if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
            be = "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è. –ü–∞—Å–ø—Ä–∞–±—É–π—Ü–µ —ñ–Ω—à—ã —Ç—ç–∫—Å—Ç."
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        await wait_message.delete()
        await update.message.reply_text(be)
        
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
        await wait_message.delete()
        await update.message.reply_text(f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É: {e}")

# –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º
async def on_inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = (update.inline_query.query or "").strip()
    if not query:
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–£–≤—è–¥–∑—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç",
                input_message_content=InputTextMessageContent("–£–≤—è–¥–∑—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É."),
                description="–Ø –ø–µ—Ä–∞–∫–ª–∞–¥—É –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é –ø—Ä–∞–∑ Skarnik"
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)
        return

    skarnik_tr, fallback_tr = await ensure_translator()
    
    try:
        if skarnik_tr:
            # –ü—Ä–æ–±—É–µ–º Skarnik –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
            be = skarnik_tr.translate_ru_to_be(query)
            if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞") and not be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                results = [
                    InlineQueryResultArticle(
                        id=str(uuid4()),
                        title="–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é (Skarnik)",
                        input_message_content=InputTextMessageContent(be),
                        description=be[:120]
                    )
                ]
                await update.inline_query.answer(results, cache_time=0, is_personal=True)
                return
        
        # –ï—Å–ª–∏ Skarnik –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        be = fallback_tr.translate_ru_to_be(query)
        if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
            be = "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è"
        
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é (Fallback)",
                input_message_content=InputTextMessageContent(be),
                description=be[:120]
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)
        
    except Exception as e:
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É",
                input_message_content=InputTextMessageContent(f"–ü–∞–º—ã–ª–∫–∞: {e}"),
                description="–ü—Ä–∞–≤–µ—Ä—Ü–µ —Ç—ç–∫—Å—Ç —ñ –ø–∞—Å–ø—Ä–∞–±—É–π—Ü–µ –∑–Ω–æ—û"
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)

def main():
    token = load_or_ask_token()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
    proxy_config = get_proxy_config()
    
    if proxy_config:
        # –°–æ–∑–¥–∞–µ–º HTTPXRequest —Å –ø—Ä–æ–∫—Å–∏
        request = HTTPXRequest(
            proxy_url=proxy_config["proxy_url"],
            proxy_auth=proxy_config["proxy_auth"]
        )
        app = Application.builder().token(token).request(request).build()
        print("üîß –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–æ–∫—Å–∏")
    else:
        app = Application.builder().token(token).build()
        print("üåê –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        if "NetworkError" in str(context.error) or "httpx.ReadError" in str(context.error):
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–∫—Å–∏.")

    app.add_error_handler(error_handler)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(InlineQueryHandler(on_inline_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    print("üîç –ë–æ—Ç –ø–µ—Ä–∞–∫–ª–∞–¥—É –ø—Ä–∞–∑ Skarnik –∑–∞–ø—É—â–µ–Ω. –ù–∞–±–µ—Ä–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    print("üí° –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞—é –æ–Ω–ª–∞–π–Ω-—Å–ª–æ—û–Ω—ñ–∫ Skarnik –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É...")
    
    if not proxy_config:
        print("\nüí° –ï—Å–ª–∏ Telegram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        print("PROXY_URL=http://your-proxy:port")
        print("–∏–ª–∏")
        print("PROXY_URL=socks5://your-proxy:port")
    
    try:
        app.run_polling(
            close_loop=False,
            drop_pending_updates=True,
            allowed_updates=["message", "inline_query"]
        )
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")

if __name__ == "__main__":
    main()
