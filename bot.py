import os
import sys
import threading
import requests
import json
from typing import Optional

from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, MessageHandler, InlineQueryHandler, filters, ContextTypes
from uuid import uuid4

ENV_PATH = ".env"

def load_or_ask_token() -> str:
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if token:
        return token.strip()

    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ .env
    if os.path.exists(ENV_PATH):
        with open(ENV_PATH, "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith("TELEGRAM_BOT_TOKEN="):
                    token = line.split("=", 1)[1].strip()
                    if token:
                        os.environ["TELEGRAM_BOT_TOKEN"] = token
                        return token

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º
    print("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather –∏ –Ω–∞–∂–º–∏—Ç–µ Enter:")
    token = input().strip()
    if not token:
        print("–¢–æ–∫–µ–Ω –ø—É—Å—Ç. –í—ã—Ö–æ–¥.")
        sys.exit(1)

    with open(ENV_PATH, "w", encoding="utf-8") as f:
        f.write(f"TELEGRAM_BOT_TOKEN={token}\n")
    os.environ["TELEGRAM_BOT_TOKEN"] = token
    return token

# –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–µ—Ä–µ–∑ Ollama
class OllamaTranslator:
    def __init__(self, model_name: str = "mistral:7b"):
        self.model_name = model_name
        self.base_url = "http://localhost:11434"
        self.test_connection()
    
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama"""
        try:
            response = requests.get(f"{self.base_url}/api/tags")
            if response.status_code == 200:
                models = response.json().get('models', [])
                model_names = [m['name'] for m in models]
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama —É—Å–ø–µ—à–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {model_names}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å
                if self.model_name not in model_names:
                    print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {self.model_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {model_names}")
                    if model_names:
                        self.model_name = model_names[0]
                        print(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {self.model_name}")
            else:
                print(f"‚ö†Ô∏è Ollama –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º {response.status_code}")
        except requests.exceptions.ConnectionError:
            print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ localhost:11434")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
    
    def change_model(self, new_model: str):
        """–°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏"""
        self.model_name = new_model
        print(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_model}")

    def translate_ru_to_be(self, text: str, max_len: int = 512) -> str:
        text = text.strip()
        if not text:
            return ""
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Mistral - —ç—Ç–∞ –º–æ–¥–µ–ª—å –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç
            prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:

–†—É—Å—Å–∫–∏–π: {text}
–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π:"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama
            response = requests.post(
                f"{self.base_url}/api/generate",
                json={
                    "model": self.model_name,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.1,  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è Mistral
                        "top_p": 0.8,
                        "max_tokens": max_len
                    }
                },
                timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 60 —Å–µ–∫—É–Ω–¥
            )
            
            if response.status_code == 200:
                result = response.json()
                translation = result.get('response', '').strip()
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Mistral
                if self.model_name == "mistral:7b":
                    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ —Å—É—Ñ—Ñ–∏–∫—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                    if translation.startswith("–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:"):
                        translation = translation[67:].strip()
                    if translation.startswith("–†—É—Å—Å–∫–∏–π:"):
                        translation = translation[8:].strip()
                    if translation.startswith("–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π:"):
                        translation = translation[12:].strip()
                    if translation.startswith(":"):
                        translation = translation[1:].strip()
                    
                    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö
                    if "(" in translation and ")" in translation:
                        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–æ –ø–µ—Ä–≤–æ–π —Å–∫–æ–±–∫–∏
                        translation = translation.split("(")[0].strip()
                
                # –û–±—â–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if translation.startswith("–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:"):
                    translation = translation[22:].strip()
                if translation.startswith("–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π:"):
                    translation = translation[12:].strip()
                if translation.startswith(":"):
                    translation = translation[1:].strip()
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
                if translation and len(translation.split()) < len(text.split()) * 0.6:
                    # –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
                    print(f"–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: '{translation}' –¥–ª—è —Ç–µ–∫—Å—Ç–∞ '{text}', –ø—Ä–æ–±—É—é –µ—â–µ —Ä–∞–∑...")
                    
                    strict_prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ –í–°–ï —Å–ª–æ–≤–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏—á–µ–≥–æ:

–†—É—Å—Å–∫–∏–π: {text}
–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π:"""
                    
                    retry_response = requests.post(
                        f"{self.base_url}/api/generate",
                        json={
                            "model": self.model_name,
                            "prompt": strict_prompt,
                            "stream": False,
                            "options": {
                                "temperature": 0.05,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                                "top_p": 0.6,
                                "max_tokens": max_len
                            }
                        },
                        timeout=60
                    )
                    
                    if retry_response.status_code == 200:
                        retry_result = retry_response.json()
                        retry_translation = retry_result.get('response', '').strip()
                        
                        # –û—á–∏—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        if retry_translation.startswith("–ü–µ—Ä–µ–≤–µ–¥–∏ –í–°–ï —Å–ª–æ–≤–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏—á–µ–≥–æ:"):
                            retry_translation = retry_translation[67:].strip()
                        if retry_translation.startswith("–†—É—Å—Å–∫–∏–π:"):
                            retry_translation = retry_translation[8:].strip()
                        if retry_translation.startswith("–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π:"):
                            retry_translation = retry_translation[12:].strip()
                        if retry_translation.startswith(":"):
                            retry_translation = retry_translation[1:].strip()
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                        if len(retry_translation.split()) > len(translation.split()):
                            translation = retry_translation
                            print(f"–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: '{translation}'")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ –µ—â–µ –Ω–µ–ø–æ–ª–Ω—ã–π, –ø—Ä–æ–±—É–µ–º —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑
                if translation and len(translation.split()) < len(text.split()) * 0.8:
                    print(f"–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ –µ—â–µ –Ω–µ–ø–æ–ª–Ω—ã–π: '{translation}' –¥–ª—è —Ç–µ–∫—Å—Ç–∞ '{text}', –ø—Ä–æ–±—É—é —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑...")
                    
                    final_prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ –ö–ê–ñ–î–û–ï —Å–ª–æ–≤–æ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:

–†—É—Å—Å–∫–∏–π: {text}
–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π:"""
                    
                    final_response = requests.post(
                        f"{self.base_url}/api/generate",
                        json={
                            "model": self.model_name,
                            "prompt": final_prompt,
                            "stream": False,
                            "options": {
                                "temperature": 0.0,
                                "top_p": 0.4,
                                "max_tokens": max_len
                            }
                        },
                        timeout=60
                    )
                    
                    if final_response.status_code == 200:
                        final_result = final_response.json()
                        final_translation = final_result.get('response', '').strip()
                        
                        # –û—á–∏—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        if final_translation.startswith("–ü–µ—Ä–µ–≤–µ–¥–∏ –ö–ê–ñ–î–û–ï —Å–ª–æ–≤–æ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:"):
                            final_translation = final_translation[67:].strip()
                        if final_translation.startswith("–†—É—Å—Å–∫–∏–π:"):
                            final_translation = final_translation[8:].strip()
                        if final_translation.startswith("–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π:"):
                            final_translation = final_translation[12:].strip()
                        if final_translation.startswith(":"):
                            final_translation = final_translation[1:].strip()
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –∏–∑ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                        if len(final_translation.split()) > len(translation.split()):
                            translation = final_translation
                            print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: '{translation}'")
                
                return translation if translation else "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è"
            else:
                print(f"–û—à–∏–±–∫–∞ Ollama API: {response.status_code} - {response.text}")
                return f"–ü–∞–º—ã–ª–∫–∞ API: {response.status_code}"
                
        except requests.exceptions.Timeout:
            return "–ü–∞–º—ã–ª–∫–∞: –ø–µ—Ä–∞—û–∑—ã—Ö–æ–¥ —á–∞—Å—É —á–∞–∫–∞–Ω–Ω—è (60 —Å–µ–∫)"
        except requests.exceptions.ConnectionError:
            return "–ü–∞–º—ã–ª–∫–∞: –Ω—è–º–∞ –∑–ª—É—á—ç–Ω–Ω—è –∑ Ollama"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É: {e}"

# Fallback –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –±–∞–∑–æ–≤—ã–º —Å–ª–æ–≤–∞—Ä–µ–º
class FallbackTranslator:
    def __init__(self):
        # –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        self.translations = {
            "–ø—Ä–∏–≤–µ—Ç": "–ø—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ",
            "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ": "–¥–∞–±—Ä—ã–¥–∑–µ–Ω—å",
            "—Å–ø–∞—Å–∏–±–æ": "–¥–∑—è–∫—É–π",
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞": "–∫–∞–ª—ñ –ª–∞—Å–∫–∞",
            "–¥–∞": "—Ç–∞–∫",
            "–Ω–µ—Ç": "–Ω–µ",
            "—Ö–æ—Ä–æ—à–æ": "–¥–æ–±—Ä–∞",
            "–ø–ª–æ—Ö–æ": "–¥—Ä—ç–Ω–Ω–∞",
            "–∫–∞–∫ –¥–µ–ª–∞": "—è–∫ —Å–ø—Ä–∞–≤—ã",
            "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è": "–¥–∞ –ø–∞–±–∞—á—ç–Ω–Ω—è",
            "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç": "—è–∫ —Ü—è–±–µ –∑–∞–≤—É—Ü—å",
            "–º–µ–Ω—è –∑–æ–≤—É—Ç": "–º—è–Ω–µ –∑–∞–≤—É—Ü—å",
            "–≥–¥–µ —Ç—ã –∂–∏–≤–µ—à—å": "–¥–∑–µ —Ç—ã –∂—ã–≤–µ—à",
            "—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç": "–∫–æ–ª—å–∫—ñ —Ç–∞–±–µ –≥–∞–¥–æ—û"
        }
    
    def translate_ru_to_be(self, text: str, max_len: int = 512) -> str:
        text = text.strip().lower()
        if not text:
            return ""
        
        # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if text in self.translations:
            return self.translations[text]
        
        # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for ru, be in self.translations.items():
            if ru in text:
                return f"–ß–∞—Å—Ç–∫–æ–≤—ã –ø–µ—Ä–∞–∫–ª–∞–¥: {be} (–¥–ª—è '{ru}')"
        
        return "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã —û –±–∞–∑–µ. –ü–∞—Å–ø—Ä–∞–±—É–π—Ç–µ —ñ–Ω—à—ã —Ç—ç–∫—Å—Ç."

translator: Optional[OllamaTranslator] = None
fallback_translator: Optional[FallbackTranslator] = None
translator_lock = threading.Lock()

async def ensure_translator():
    global translator, fallback_translator
    
    if translator is None:
        with translator_lock:
            if translator is None:
                try:
                    translator = OllamaTranslator()
                    fallback_translator = FallbackTranslator()
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Ollama: {e}")
                    translator = None
                    fallback_translator = FallbackTranslator()
    
    return translator, fallback_translator

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "–ü—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ! –Ø –ø–µ—Ä–∞–∫–ª–∞–¥–∞—é –∑ —Ä—É—Å–∫–∞–π –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é ü™Ñ\n\n"
        "‚Ä¢ –ù–∞–ø—ñ—à—ã—Ü–µ –º–Ω–µ —Ç—ç–∫—Å—Ç ‚Äî —è –∞–¥–∫–∞–∂—É –ø–µ—Ä–∞–∫–ª–∞–¥–∞–º.\n"
        "‚Ä¢ –£ –ª—é–±—ã–º —á–∞—Ü–µ —û–≤—è–¥–∑—ñ—Ü–µ: @"
        f"{(await context.bot.get_me()).username} –≤–∞—à —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç ‚Äî —ñ —û—Å—Ç–∞—û—Ü–µ –≤—ã–Ω—ñ–∫.\n\n"
        "–ö—Ä—ã–Ω—ñ—Ü–∞: –º–∞–¥—ç–ª—å Mistral 7B –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É.\n"
        "–£ –≤—ã–ø–∞–¥–∫—É –ø–∞–º—ã–ª–∫—ñ –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ fallback –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫.\n\n"
        "–ö–∞–º–∞–Ω–¥—ã:\n"
        "/start - –ø–∞—á–∞—Ç–∞–∫\n"
        "/help - –¥–∞–ø–∞–º–æ–≥–∞\n"
        "/status - —Å—Ç–∞—Ç—É—Å Ollama\n"
        "/model - –∑–º–µ–Ω–∞ –º–∞–¥—ç–ª—ñ\n"
        "/test - —Ç—ç—Å—Ç –ø–µ—Ä–∞–∫–ª–∞–¥—É"
    )
    await update.message.reply_text(msg)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–æ—Å—Ç–∞ –¥–∞—à–ª—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç ‚Äî —è –ø–µ—Ä–∞–∫–ª–∞–¥—É –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é.\n"
        "–Ü–Ω–ª–∞–π–Ω: @–Ü–º—è–ë–æ—Ç–∞ –≤–∞—à —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç.\n\n"
        "–ë–æ—Ç –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ –º–∞–¥—ç–ª—å Mistral 7B –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É.\n"
        "–ö–∞–º–∞–Ω–¥—ã:\n"
        "/status - —Å—Ç–∞—Ç—É—Å Ollama\n"
        "/model - –∑–º–µ–Ω–∞ –º–∞–¥—ç–ª—ñ\n"
        "/test - —Ç—ç—Å—Ç –ø–µ—Ä–∞–∫–ª–∞–¥—É"
    )

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Ollama –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    try:
        response = requests.get("http://localhost:11434/api/tags", timeout=10)
        if response.status_code == 200:
            models = response.json().get('models', [])
            if models:
                model_list = "\n".join([f"‚Ä¢ {m['name']} ({m.get('details', {}).get('parameter_size', 'N/A')})" for m in models])
                msg = f"‚úÖ Ollama –ø—Ä–∞—Ü—É–µ\n\n–î–æ—Å—Ç—É–ø–Ω—ã—è –º–∞–¥—ç–ª—ñ:\n{model_list}"
            else:
                msg = "‚úÖ Ollama –ø—Ä–∞—Ü—É–µ, –∞–ª–µ –º–∞–¥—ç–ª—ñ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"
        else:
            msg = f"‚ö†Ô∏è Ollama –∞–¥–∫–∞–∑–∞—û –∑ –∫–æ–¥–∞–º {response.status_code}"
    except requests.exceptions.ConnectionError:
        msg = "‚ùå –ù–µ —û–¥–∞–µ—Ü—Ü–∞ –∑–ª—É—á—ã—Ü—Ü–∞ –∑ Ollama\nüí° –ó–∞–ø—É—Å—Ü—ñ—Ü–µ: ollama serve"
    except Exception as e:
        msg = f"‚ùå –ü–∞–º—ã–ª–∫–∞: {e}"
    
    await update.message.reply_text(msg)

async def model_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    global translator
    
    if not context.args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
        if translator:
            msg = f"–ü–æ—Ç–æ—á–Ω–∞—è –º–∞–¥—ç–ª—å: {translator.model_name}\n\n–î–ª—è –∑–º–µ–Ω—ã –º–∞–¥—ç–ª—ñ –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ:\n/model <–Ω–∞–∑–≤–∞_–º–∞–¥—ç–ª—ñ>"
        else:
            msg = "–ü–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫ –Ω–µ —ñ–Ω—ñ—Ü—ã—è–ª—ñ–∑–∞–≤–∞–Ω—ã"
        await update.message.reply_text(msg)
        return
    
    new_model = context.args[0]
    
    if translator:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å
            response = requests.get("http://localhost:11434/api/tags", timeout=10)
            if response.status_code == 200:
                models = [m['name'] for m in response.json().get('models', [])]
                if new_model in models:
                    translator.change_model(new_model)
                    msg = f"‚úÖ –ú–∞–¥—ç–ª—å –∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_model}"
                else:
                    msg = f"‚ùå –ú–∞–¥—ç–ª—å {new_model} –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω–∞\n\n–î–æ—Å—Ç—É–ø–Ω—ã—è –º–∞–¥—ç–ª—ñ:\n" + "\n".join([f"‚Ä¢ {m}" for m in models])
            else:
                msg = "‚ùå –ù–µ —û–¥–∞–µ—Ü—Ü–∞ –ø—Ä–∞–≤–µ—Ä—ã—Ü—å –º–∞–¥—ç–ª—ñ"
        except Exception as e:
            msg = f"‚ùå –ü–∞–º—ã–ª–∫–∞: {e}"
    else:
        msg = "‚ùå –ü–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫ –Ω–µ —ñ–Ω—ñ—Ü—ã—è–ª—ñ–∑–∞–≤–∞–Ω—ã"
    
    await update.message.reply_text(msg)

async def test_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    if not context.args:
        await update.message.reply_text(
            "–í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ: /test <—Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç>\n\n"
            "–ü—Ä—ã–∫–ª–∞–¥: /test –∫–∞–∫ –¥–µ–ª–∞ –º–æ—è —Ö–æ—Ä–æ—à–∞—è"
        )
        return
    
    test_text = " ".join(context.args)
    ollama_tr, fallback_tr = await ensure_translator()
    
    if ollama_tr:
        await update.message.reply_text(f"üß™ –¢—ç—Å—Ç –ø–µ—Ä–∞–∫–ª–∞–¥—É:\n\n–†—É—Å–∫—ñ: {test_text}\n\n–ü–µ—Ä–∞–∫–ª–∞–¥–∞—é...")
        
        try:
            be = ollama_tr.translate_ru_to_be(test_text)
            await update.message.reply_text(f"–ë–µ–ª–∞—Ä—É—Å–∫—ñ: {be}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–∞–º—ã–ª–∫–∞: {e}")
    else:
        await update.message.reply_text("‚ùå –ü–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫ Ollama –Ω–µ –¥–∞—Å—Ç—É–ø–Ω—ã")

# –ü–µ—Ä–µ–≤–æ–¥ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    ollama_tr, fallback_tr = await ensure_translator()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    wait_message = await update.message.reply_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥...")
    
    try:
        if ollama_tr:
            # –ü—Ä–æ–±—É–µ–º Ollama
            be = ollama_tr.translate_ru_to_be(text)
            if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞"):
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                await wait_message.delete()
                await update.message.reply_text(be)
                return
        
        # –ï—Å–ª–∏ Ollama –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        be = fallback_tr.translate_ru_to_be(text)
        if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
            be = "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è. –ü–∞—Å–ø—Ä–∞–±—É–π—Ç–µ —ñ–Ω—à—ã —Ç—ç–∫—Å—Ç."
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        await wait_message.delete()
        await update.message.reply_text(be)
        
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
        await wait_message.delete()
        await update.message.reply_text(f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É: {e}")

# –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º: @BotName <—Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç>
async def on_inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = (update.inline_query.query or "").strip()
    if not query:
        # –ü–æ–∫–∞–∂–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É-–ø—É—Å—Ç—ã—à–∫—É, —á—Ç–æ–±—ã –±—ã–ª–æ —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–£–≤—è–¥–∑—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç",
                input_message_content=InputTextMessageContent("–£–≤—è–¥–∑—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É."),
                description="–Ø –ø–µ—Ä–∞–∫–ª–∞–¥—É –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é"
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)
        return

    ollama_tr, fallback_tr = await ensure_translator()
    
    try:
        if ollama_tr:
            # –ü—Ä–æ–±—É–µ–º Ollama
            be = ollama_tr.translate_ru_to_be(query)
            if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞"):
                results = [
                    InlineQueryResultArticle(
                        id=str(uuid4()),
                        title="–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é (Ollama)",
                        input_message_content=InputTextMessageContent(be),
                        description=be[:120]
                    )
                ]
                await update.inline_query.answer(results, cache_time=0, is_personal=True)
                return
        
        # –ï—Å–ª–∏ Ollama –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        be = fallback_tr.translate_ru_to_be(query)
        if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
            be = "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è"
        
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é (Fallback)",
                input_message_content=InputTextMessageContent(be),
                description=be[:120]
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)
        
    except Exception as e:
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É",
                input_message_content=InputTextMessageContent(f"–ü–∞–º—ã–ª–∫–∞: {e}"),
                description="–ü—Ä–∞–≤–µ—Ä—Ü–µ —Ç—ç–∫—Å—Ç —ñ –ø–∞—Å–ø—Ä–∞–±—É–π—Ç–µ –∑–Ω–æ—û"
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)

def main():
    token = load_or_ask_token()
    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("model", model_cmd))
    app.add_handler(CommandHandler("test", test_cmd))
    app.add_handler(InlineQueryHandler(on_inline_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–±–µ—Ä–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω–∞: ollama serve")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()