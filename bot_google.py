#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —á–µ—Ä–µ–∑ Google Translate API
"""

import os
import sys
import threading
import time
from typing import Optional

from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, MessageHandler, InlineQueryHandler, filters, ContextTypes
from uuid import uuid4

# Google Translate API
try:
    from googletrans import Translator
    GOOGLE_AVAILABLE = True
except ImportError:
    GOOGLE_AVAILABLE = False
    print("‚ùå googletrans –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install googletrans==4.0.0rc1")

ENV_PATH = ".env"

def load_or_ask_token() -> str:
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if token:
        return token.strip()

    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ .env
    if os.path.exists(ENV_PATH):
        with open(ENV_PATH, "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith("TELEGRAM_BOT_TOKEN="):
                    token = line.split("=", 1)[1].strip()
                    if token:
                        os.environ["TELEGRAM_BOT_TOKEN"] = token
                        return token

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º
    print("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather –∏ –Ω–∞–∂–º–∏—Ç–µ Enter:")
    token = input().strip()
    if not token:
        print("–¢–æ–∫–µ–Ω –ø—É—Å—Ç. –í—ã—Ö–æ–¥.")
        sys.exit(1)

    with open(ENV_PATH, "w", encoding="utf-8") as f:
        f.write(f"TELEGRAM_BOT_TOKEN={token}\n")
    os.environ["TELEGRAM_BOT_TOKEN"] = token
    return token

# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–µ—Ä–µ–∑ Google Translate API
class GoogleTranslator:
    def __init__(self):
        if not GOOGLE_AVAILABLE:
            raise ImportError("googletrans –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.translator = Translator()
        print("‚úÖ Google Translate –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def translate_ru_to_be(self, text: str, max_len: int = 512) -> str:
        text = text.strip()
        if not text:
            return ""
        
        try:
            print(f"üîç –ü–µ—Ä–µ–≤–æ–∂—É —á–µ—Ä–µ–∑ Google: '{text}'")
            
            # Google Translate API
            result = self.translator.translate(text, src='ru', dest='be')
            
            if result and result.text:
                translation = result.text.strip()
                print(f"‚úÖ Google –ø–µ—Ä–µ–≤–æ–¥: '{text}' ‚Üí '{translation}'")
                return translation
            else:
                print(f"‚ùå Google –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è: '{text}'")
                return f"–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã –¥–ª—è: {text}"
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Google Translate: {e}")
            return f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É: {e}"

# Fallback –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –±–∞–∑–æ–≤—ã–º —Å–ª–æ–≤–∞—Ä–µ–º
class FallbackTranslator:
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        self.translations = {
            "–ø—Ä–∏–≤–µ—Ç": "–ø—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ",
            "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ": "–¥–∞–±—Ä—ã–¥–∑–µ–Ω—å",
            "—Å–ø–∞—Å–∏–±–æ": "–¥–∑—è–∫—É–π",
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞": "–∫–∞–ª—ñ –ª–∞—Å–∫–∞",
            "–¥–∞": "—Ç–∞–∫",
            "–Ω–µ—Ç": "–Ω–µ",
            "—Ö–æ—Ä–æ—à–æ": "–¥–æ–±—Ä–∞",
            "–ø–ª–æ—Ö–æ": "–¥—Ä—ç–Ω–Ω–∞",
            "–∫–∞–∫ –¥–µ–ª–∞": "—è–∫ —Å–ø—Ä–∞–≤—ã",
            "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è": "–¥–∞ –ø–∞–±–∞—á—ç–Ω–Ω—è",
            "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç": "—è–∫ —Ü—è–±–µ –∑–∞–≤—É—Ü—å",
            "–º–µ–Ω—è –∑–æ–≤—É—Ç": "–º—è–Ω–µ –∑–∞–≤—É—Ü—å",
            "–≥–¥–µ —Ç—ã –∂–∏–≤–µ—à—å": "–¥–∑–µ —Ç—ã –∂—ã–≤–µ—à",
            "—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç": "–∫–æ–ª—å–∫—ñ —Ç–∞–±–µ –≥–∞–¥–æ—û",
            "–Ω–µ –Ω–∞–¥–æ": "–Ω–µ —Ç—Ä—ç–±–∞",
            "–≤ –∫—Ä–æ–≤–∞—Ç–∏": "—É –ø–∞—Å—Ü–µ–ª—ñ",
            "—Ç–∞–∫ —Ö–æ—Ä–æ—à–æ": "—Ç–∞–∫ –¥–æ–±—Ä–∞",
            "–º–æ—è —Ö–æ—Ä–æ—à–∞—è": "–º–∞—è –¥–∞—Ä–∞–≥–∞—è",
            "–ª—é–±–ª—é —Ç–µ–±—è": "–∫–∞—Ö–∞—é —Ü—è–±–µ",
            "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏": "—Å–ø–∞–∫–æ–π–Ω–∞–π –Ω–æ—á—ã",
            "—á—Ç–æ –¥–µ–ª–∞–µ—à—å": "—à—Ç–æ —Ä–æ–±—ñ—à",
            "–≥–¥–µ —Ç—ã": "–¥–∑–µ —Ç—ã",
            "–∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—à—å": "–∫–∞–ª—ñ –ø—Ä—ã–π–¥–∑–µ—à",
            "—É—Ç—Ä–æ": "—Ä–∞–Ω—ñ—Ü–∞",
            "–¥–µ–Ω—å": "–¥–∑–µ–Ω—å",
            "–≤–µ—á–µ—Ä": "–≤–µ—á–∞—Ä",
            "–Ω–æ—á—å": "–Ω–æ—á",
            "—Å–æ–ª–Ω—Ü–µ": "—Å–æ–Ω—Ü–∞",
            "–ª—É–Ω–∞": "–º–µ—Å—è—Ü",
            "–∑–≤–µ–∑–¥–∞": "–∑–æ—Ä–∫–∞",
            "–Ω–µ–±–æ": "–Ω–µ–±–∞",
            "–∑–µ–º–ª—è": "–∑—è–º–ª—è",
            "–≤–æ–¥–∞": "–≤–∞–¥–∞",
            "–æ–≥–æ–Ω—å": "–∞–≥–æ–Ω—å",
            "–≤–æ–∑–¥—É—Ö": "–ø–∞–≤–µ—Ç—Ä–∞",
            "–¥–µ—Ä–µ–≤–æ": "–¥—Ä—ç–≤–∞",
            "—Ü–≤–µ—Ç–æ–∫": "–∫–≤–µ—Ç–∫–∞",
            "—Ç—Ä–∞–≤–∞": "—Ç—Ä–∞–≤–∞",
            "–ª–∏—Å—Ç": "–ª—ñ—Å—Ç",
            "–∫–æ—Ä–µ–Ω—å": "–∫–æ—Ä–∞–Ω—å",
            "–≤–µ—Ç–∫–∞": "–≥–∞–ª—ñ–Ω–∞",
            "–ø–ª–æ–¥": "–ø–ª–æ–¥",
            "—Å–µ–º—è": "—Å–µ–º—è",
            "–ª–∏—Å—Ç": "–ª—ñ—Å—Ç",
            "–≤–µ—Ç–∫–∞": "–≥–∞–ª—ñ–Ω–∞",
            "–∫–æ—Ä–µ–Ω—å": "–∫–æ—Ä–∞–Ω—å",
            "—Å—Ç–≤–æ–ª": "—Å—Ç–≤–æ–ª",
            "–∫–æ—Ä–∞": "–∫–∞—Ä–∞",
            "—Å–æ–∫": "—Å–æ–∫",
            "—Å–º–æ–ª–∞": "—Å–º–æ–ª–∞",
            "–ø—ã–ª—å—Ü–∞": "–ø—ã–ª–æ–∫",
            "–Ω–µ–∫—Ç–∞—Ä": "–Ω–µ–∫—Ç–∞—Ä",
            "–º–µ–¥": "–º—ë–¥",
            "–≤–æ—Å–∫": "–≤–æ—Å–∫",
            "–ø—á–µ–ª–∞": "–ø—á–∞–ª–∞",
            "–æ—Å–∞": "–∞—Å–∞",
            "—à–º–µ–ª—å": "—à–º–µ–ª—å",
            "–±–∞–±–æ—á–∫–∞": "–º–∞—Ç—ã–ª—ë–∫",
            "–∂—É–∫": "–∂—É–∫",
            "–ø–∞—É–∫": "–ø–∞–≤—É–∫",
            "–º—É—Ä–∞–≤–µ–π": "–º—É—Ä–∞—à–∫–∞",
            "–∫—É–∑–Ω–µ—á–∏–∫": "–∫–æ–Ω—ñ–∫",
            "—Å–≤–µ—Ä—á–æ–∫": "—Ü–≤—ã—Ä–∫—É–Ω",
            "—Ü–∏–∫–∞–¥–∞": "—Ü—ã–∫–∞–¥–∞",
            "—Å—Ç—Ä–µ–∫–æ–∑–∞": "—Å—Ç—Ä–∞–∫–æ–∑–∞",
            "–∫–æ–º–∞—Ä": "–∫–∞–º–∞—Ä",
            "–º—É—Ö–∞": "–º—É—Ö–∞",
            "–æ—Å–∞": "–∞—Å–∞",
            "–ø—á–µ–ª–∞": "–ø—á–∞–ª–∞",
            "—à–º–µ–ª—å": "—à–º–µ–ª—å",
            "–±–∞–±–æ—á–∫–∞": "–º–∞—Ç—ã–ª—ë–∫",
            "–∂—É–∫": "–∂—É–∫",
            "–ø–∞—É–∫": "–ø–∞–≤—É–∫",
            "–º—É—Ä–∞–≤–µ–π": "–º—É—Ä–∞—à–∫–∞",
            "–∫—É–∑–Ω–µ—á–∏–∫": "–∫–æ–Ω—ñ–∫",
            "—Å–≤–µ—Ä—á–æ–∫": "—Ü–≤—ã—Ä–∫—É–Ω",
            "—Ü–∏–∫–∞–¥–∞": "—Ü—ã–∫–∞–¥–∞",
            "—Å—Ç—Ä–µ–∫–æ–∑–∞": "—Å—Ç—Ä–∞–∫–æ–∑–∞",
            "–∫–æ–º–∞—Ä": "–∫–∞–º–∞—Ä",
            "–º—É—Ö–∞": "–º—É—Ö–∞"
        }
    
    def translate_ru_to_be(self, text: str, max_len: int = 512) -> str:
        text = text.strip().lower()
        if not text:
            return ""
        
        # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if text in self.translations:
            return self.translations[text]
        
        # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for ru, be in self.translations.items():
            if ru in text:
                return f"–ß–∞—Å—Ç–∫–æ–≤—ã –ø–µ—Ä–∞–∫–ª–∞–¥: {be} (–¥–ª—è '{ru}')"
        
        return "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã —û –±–∞–∑–µ. –ü–∞—Å–ø—Ä–∞–±—É–π—Ü–µ —ñ–Ω—à—ã —Ç—ç–∫—Å—Ç."

translator: Optional[GoogleTranslator] = None
fallback_translator: Optional[FallbackTranslator] = None
translator_lock = threading.Lock()

async def ensure_translator():
    global translator, fallback_translator
    
    if translator is None:
        with translator_lock:
            if translator is None:
                try:
                    translator = GoogleTranslator()
                    fallback_translator = FallbackTranslator()
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Translate: {e}")
                    print("–ò—Å–ø–æ–ª—å–∑—É—é fallback –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫...")
                    translator = None
                    fallback_translator = FallbackTranslator()
    
    return translator, fallback_translator

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_username = (await context.bot.get_me()).username
    msg = (
        "–ü—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ! –Ø –ø–µ—Ä–∞–∫–ª–∞–¥–∞—é –∑ —Ä—É—Å–∫–∞–π –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é –ø—Ä–∞–∑ Google Translate üåê\n\n"
        "üìù –°–ø–æ—Å–∞–±—ã –≤—ã–∫–∞—Ä—ã—Å—Ç–∞–Ω–Ω—è:\n"
        "‚Ä¢ –ù–∞–ø—ñ—à—ã—Ü–µ –º–Ω–µ —Ç—ç–∫—Å—Ç ‚Äî —è –∞–¥–∫–∞–∂—É –ø–µ—Ä–∞–∫–ª–∞–¥–∞–º.\n"
        "‚Ä¢ –£ –ª—é–±—ã–º —á–∞—Ü–µ —û–≤—è–¥–∑—ñ—Ü–µ: @"
        f"{bot_username} –≤–∞—à —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç ‚Äî —ñ —û—Å—Ç–∞—û—Ü–µ –≤—ã–Ω—ñ–∫.\n"
        f"‚Ä¢ –î–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É –∞–¥–Ω–∞–≥–æ —Å–ª–æ–≤–∞: –î–æ–±—Ä–∞–µ @{bot_username} —É—Ç—Ä–æ\n\n"
        "–ö—Ä—ã–Ω—ñ—Ü–∞: Google Translate API.\n"
        "–£ –≤—ã–ø–∞–¥–∫—É –ø–∞–º—ã–ª–∫—ñ –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ fallback –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫.\n\n"
        "–ö–∞–º–∞–Ω–¥—ã:\n"
        "/start - –ø–∞—á–∞—Ç–∞–∫\n"
        "/help - –¥–∞–ø–∞–º–æ–≥–∞\n"
        "/status - —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫–∞\n"
        "/test - —Ç—ç—Å—Ç –ø–µ—Ä–∞–∫–ª–∞–¥—É"
    )
    await update.message.reply_text(msg)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_username = (await context.bot.get_me()).username
    await update.message.reply_text(
        "üìù –°–ø–æ—Å–∞–±—ã –≤—ã–∫–∞—Ä—ã—Å—Ç–∞–Ω–Ω—è:\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–∞–∫–ª–∞–¥ –ø–æ—û–Ω–∞–≥–∞ —Ç—ç–∫—Å—Ç—É:\n"
        "–ù–∞–ø—ñ—à—ã—Ü–µ –º–Ω–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç ‚Äî —è –∞–¥–∫–∞–∂—É –ø–µ—Ä–∞–∫–ª–∞–¥–∞–º.\n\n"
        "2Ô∏è‚É£ –Ü–Ω–ª–∞–π–Ω-—Ä—ç–∂—ã–º:\n"
        f"@{bot_username} –≤–∞—à —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç\n\n"
        f"3Ô∏è‚É£ –ü–µ—Ä–∞–∫–ª–∞–¥ –∞–¥–Ω–∞–≥–æ —Å–ª–æ–≤–∞:\n"
        f"–î–æ–±—Ä–∞–µ @{bot_username} —É—Ç—Ä–æ\n"
        f"–°–ø–∞—Å–∏–±–æ @{bot_username} –±–æ–ª—å—à–æ–µ\n\n"
        "–ë–æ—Ç –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ Google Translate API –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É.\n"
        "–ö–∞–º–∞–Ω–¥—ã:\n"
        "/status - —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫–∞\n"
        "/test - —Ç—ç—Å—Ç –ø–µ—Ä–∞–∫–ª–∞–¥—É"
    )

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"""
    global translator
    
    if translator:
        msg = "‚úÖ Google Translate –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫ –ø—Ä–∞—Ü—É–µ\n\n"
        msg += "üåê –ö—Ä—ã–Ω—ñ—Ü–∞: Google Translate API\n"
        msg += "‚ö° –•—É—Ç–∫–∞—Å—Ü—å: –æ–Ω–ª–∞–π–Ω –ø–µ—Ä–∞–∫–ª–∞–¥\n"
        msg += "üéØ –¢–æ—á–Ω–∞—Å—Ü—å: –≤—ã—Å–æ–∫–∞—è"
    else:
        msg = "‚ùå Google Translate –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫ –Ω–µ –¥–∞—Å—Ç—É–ø–Ω—ã\nüí° –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ fallback –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫"
    
    await update.message.reply_text(msg)

async def test_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    if not context.args:
        await update.message.reply_text(
            "–í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ: /test <—Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç>\n\n"
            "–ü—Ä—ã–∫–ª–∞–¥: /test –∫–∞–∫ –¥–µ–ª–∞ –º–æ—è —Ö–æ—Ä–æ—à–∞—è"
        )
        return
    
    test_text = " ".join(context.args)
    google_tr, fallback_tr = await ensure_translator()
    
    if google_tr:
        await update.message.reply_text(f"üåê –¢—ç—Å—Ç –ø–µ—Ä–∞–∫–ª–∞–¥—É –ø—Ä–∞–∑ Google Translate:\n\n–†—É—Å–∫—ñ: {test_text}\n\n–ü–µ—Ä–∞–∫–ª–∞–¥–∞—é...")
        
        try:
            be = google_tr.translate_ru_to_be(test_text)
            await update.message.reply_text(f"–ë–µ–ª–∞—Ä—É—Å–∫—ñ: {be}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–∞–º—ã–ª–∫–∞: {e}")
    else:
        await update.message.reply_text("‚ùå Google Translate –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫ –Ω–µ –¥–∞—Å—Ç—É–ø–Ω—ã")

# –ü–µ—Ä–µ–≤–æ–¥ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    bot_username = (await context.bot.get_me()).username
    bot_id = (await context.bot.get_me()).id
    
    print(f"üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: '{text}'")
    print(f"üîç Username –±–æ—Ç–∞: {bot_username}")
    print(f"üîç ID –±–æ—Ç–∞: {bot_id}")
    print(f"üîç Chat ID: {update.message.chat_id}")
    print(f"üîç Chat type: {update.message.chat.type}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ entities (–¥–ª—è –≥—Ä—É–ø–ø)
    is_mentioned = False
    phrase_after_mention = ""
    
    if update.message.entities:
        for entity in update.message.entities:
            if entity.type == "mention":
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                mention_text = text[entity.offset:entity.offset + entity.length]
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '{mention_text}'")
                
                if f"@{bot_username}" in mention_text.lower():
                    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    text_after_mention = text[entity.offset + entity.length:].strip()
                    if text_after_mention:
                        phrase_after_mention = text_after_mention
                        is_mentioned = True
                        print(f"üîç –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: '{phrase_after_mention}'")
                        break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ entities, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    if not is_mentioned:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        mention_pattern = f"@{bot_username}\\s+(.+)"
        import re
        mention_match = re.search(mention_pattern, text, re.IGNORECASE)
        
        print(f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω —Å @: {mention_pattern}")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å @: {mention_match is not None}")
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–µ–∑ @ (–¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤)
        simple_mention_pattern = f"{bot_username}\\s+(.+)"
        simple_mention_match = re.search(simple_mention_pattern, text, re.IGNORECASE)
        
        print(f"üîç –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: {simple_mention_pattern}")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {simple_mention_match is not None}")
        
        if mention_match:
            phrase_after_mention = mention_match.group(1).strip()
            is_mentioned = True
        elif simple_mention_match:
            phrase_after_mention = simple_mention_match.group(1).strip()
            is_mentioned = True
    
    if is_mentioned:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∏–∑ —Ñ—Ä–∞–∑—ã
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
        words = phrase_after_mention.split()
        word_to_translate = words[-1] if words else phrase_after_mention
        
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '{phrase_after_mention}' -> —Å–ª–æ–≤–æ: '{word_to_translate}'")
        
        google_tr, fallback_tr = await ensure_translator()
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            wait_message = await update.message.reply_text(f"üåê –®—É–∫–∞—é –ø–µ—Ä–∞–∫–ª–∞–¥ —Å–ª–æ–≤–∞ '{word_to_translate}' —É Google...")
            
            if google_tr:
                # –ü—Ä–æ–±—É–µ–º Google Translate
                be = google_tr.translate_ru_to_be(word_to_translate)
                print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç Google: '{be}'")
                if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞") and not be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                    try:
                        await wait_message.delete()
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–µ—Ä–µ–≤–æ–¥: '{word_to_translate}' ‚Üí '{be}'")
                    await update.message.reply_text(f"'{word_to_translate}' ‚Üí '{be}'")
                    return
                else:
                    print(f"‚ùå Google –Ω–µ –Ω–∞—à–µ–ª –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –æ—à–∏–±–∫–∞: '{be}'")
            
            # –ï—Å–ª–∏ Google –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            be = fallback_tr.translate_ru_to_be(word_to_translate)
            if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                be = "–ø–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            try:
                await wait_message.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é fallback –ø–µ—Ä–µ–≤–æ–¥: '{word_to_translate}' ‚Üí '{be}'")
            await update.message.reply_text(f"'{word_to_translate}' ‚Üí '{be}'")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
            try:
                await wait_message.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            await update.message.reply_text(f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É: {e}")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ
        google_tr, fallback_tr = await ensure_translator()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        wait_message = await update.message.reply_text("üåê –®—É–∫–∞—é –ø–µ—Ä–∞–∫–ª–∞–¥ —É Google...")
        
        try:
            if google_tr:
                # –ü—Ä–æ–±—É–µ–º Google Translate
                be = google_tr.translate_ru_to_be(text)
                if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞") and not be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                    try:
                        await wait_message.delete()
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    await update.message.reply_text(be)
                    return
            
            # –ï—Å–ª–∏ Google –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            be = fallback_tr.translate_ru_to_be(text)
            if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                be = "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è. –ü–∞—Å–ø—Ä–∞–±—É–π—Ü–µ —ñ–Ω—à—ã —Ç—ç–∫—Å—Ç."
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            try:
                await wait_message.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            await update.message.reply_text(be)
            
        except Exception as e:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
            try:
                await wait_message.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            await update.message.reply_text(f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É: {e}")

# –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º
async def on_inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = (update.inline_query.query or "").strip()
    print(f"üîç –ò–ù–õ–ê–ô–ù –ó–ê–ü–†–û–°: '{query}'")
    
    if not query:
        print("üîç –ü—É—Å—Ç–æ–π –∏–Ω–ª–∞–π–Ω –∑–∞–ø—Ä–æ—Å, –ø–æ–∫–∞–∑—ã–≤–∞—é –ø–æ–¥—Å–∫–∞–∑–∫—É")
        # –ü–æ–∫–∞–∂–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É-–ø—É—Å—Ç—ã—à–∫—É, —á—Ç–æ–±—ã –±—ã–ª–æ —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–£–≤—è–¥–∑—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç",
                input_message_content=InputTextMessageContent("–£–≤—è–¥–∑—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É."),
                description="–Ø –ø–µ—Ä–∞–∫–ª–∞–¥—É –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é –ø—Ä–∞–∑ Google Translate"
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)
        return

    google_tr, fallback_tr = await ensure_translator()
    print(f"üîç –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {google_tr is not None}")
    
    try:
        if google_tr:
            # –ü—Ä–æ–±—É–µ–º Google Translate
            be = google_tr.translate_ru_to_be(query)
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç Google –¥–ª—è –∏–Ω–ª–∞–π–Ω: '{be}'")
            if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞") and not be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω–ª–∞–π–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{query}' ‚Üí '{be}'")
                results = [
                    InlineQueryResultArticle(
                        id=str(uuid4()),
                        title="–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é (Google)",
                        input_message_content=InputTextMessageContent(be),
                        description=be[:120]
                    )
                ]
                await update.inline_query.answer(results, cache_time=0, is_personal=True)
                return
            else:
                print(f"‚ùå Google –Ω–µ –Ω–∞—à–µ–ª –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∏–Ω–ª–∞–π–Ω: '{be}'")
        
        # –ï—Å–ª–∏ Google –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        be = fallback_tr.translate_ru_to_be(query)
        if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
            be = "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è"
        
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é (Fallback)",
                input_message_content=InputTextMessageContent(be),
                description=be[:120]
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ: {e}")
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É",
                input_message_content=InputTextMessageContent(f"–ü–∞–º—ã–ª–∫–∞: {e}"),
                description="–ü—Ä–∞–≤–µ—Ä—Ü–µ —Ç—ç–∫—Å—Ç —ñ –ø–∞—Å–ø—Ä–∞–±—É–π—Ü–µ –∑–Ω–æ—û"
            )
        ]
        await update.inline_query.answer(results, cache_time=0, is_personal=True)

def main():
    if not GOOGLE_AVAILABLE:
        print("‚ùå Google Translate –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install googletrans==4.0.0rc1")
        sys.exit(1)
    
    token = load_or_ask_token()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å retry –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    app = Application.builder().token(token).build()
    
    print(f"üîß –¢–æ–∫–µ–Ω: {token[:10]}...")
    print(f"üîß –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."""
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ NetworkError, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        if "NetworkError" in str(context.error) or "httpx.ReadError" in str(context.error):
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ë–æ—Ç –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")

    app.add_error_handler(error_handler)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("test", test_cmd))
    app.add_handler(InlineQueryHandler(on_inline_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    print("üåê –ë–æ—Ç –ø–µ—Ä–∞–∫–ª–∞–¥—É –ø—Ä–∞–∑ Google Translate –∑–∞–ø—É—â–µ–Ω. –ù–∞–±–µ—Ä–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    print("üí° –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞—é Google Translate API –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É...")
    
    # –ó–∞–ø—É—Å–∫ —Å retry –ª–æ–≥–∏–∫–æ–π
    try:
        app.run_polling(
            close_loop=False,
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            allowed_updates=["message", "inline_query"]  # –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        )
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

if __name__ == "__main__":
    main()
