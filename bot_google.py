#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —á–µ—Ä–µ–∑ Google Translate API
–°–æ–≤–º–µ—Å—Ç–∏–º —Å python-telegram-bot==13.15
"""

import os
import sys
import threading
import time
import re
from typing import Optional, Dict

from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Updater, CommandHandler, MessageHandler, InlineQueryHandler, Filters, CallbackContext
from uuid import uuid4

# Google Translate API
try:
    from googletrans import Translator
    GOOGLE_AVAILABLE = True
except ImportError:
    GOOGLE_AVAILABLE = False
    print("‚ùå googletrans –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install googletrans==4.0.0rc1")

ENV_PATH = ".env"

def load_or_ask_token() -> str:
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if token:
        return token.strip()

    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ .env
    if os.path.exists(ENV_PATH):
        with open(ENV_PATH, "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith("TELEGRAM_BOT_TOKEN="):
                    token = line.split("=", 1)[1].strip()
                    if token:
                        os.environ["TELEGRAM_BOT_TOKEN"] = token
                        return token

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º
    print("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather –∏ –Ω–∞–∂–º–∏—Ç–µ Enter:")
    token = input().strip()
    if not token:
        print("–¢–æ–∫–µ–Ω –ø—É—Å—Ç. –í—ã—Ö–æ–¥.")
        sys.exit(1)

    with open(ENV_PATH, "w", encoding="utf-8") as f:
        f.write(f"TELEGRAM_BOT_TOKEN={token}\n")
    os.environ["TELEGRAM_BOT_TOKEN"] = token
    return token

# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–µ—Ä–µ–∑ Google Translate API
class GoogleTranslator:
    def __init__(self):
        if not GOOGLE_AVAILABLE:
            raise ImportError("googletrans –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.translator = Translator()
        print("‚úÖ Google Translate –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def translate_ru_to_be(self, text: str, max_len: int = 512) -> str:
        text = text.strip()
        if not text:
            return ""
        
        try:
            print(f"üîç –ü–µ—Ä–µ–≤–æ–∂—É —á–µ—Ä–µ–∑ Google: '{text}'")
            
            # Google Translate API
            result = self.translator.translate(text, src='ru', dest='be')
            
            if result and result.text:
                translation = result.text.strip()
                print(f"‚úÖ Google –ø–µ—Ä–µ–≤–æ–¥: '{text}' ‚Üí '{translation}'")
                return translation
            else:
                print(f"‚ùå Google –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è: '{text}'")
                return f"–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã –¥–ª—è: {text}"
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Google Translate: {e}")
            return f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É: {e}"

# Fallback –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –±–∞–∑–æ–≤—ã–º —Å–ª–æ–≤–∞—Ä–µ–º
class FallbackTranslator:
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        self.translations = {
            "–ø—Ä–∏–≤–µ—Ç": "–ø—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ",
            "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ": "–¥–∞–±—Ä—ã–¥–∑–µ–Ω—å",
            "—Å–ø–∞—Å–∏–±–æ": "–¥–∑—è–∫—É–π",
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞": "–∫–∞–ª—ñ –ª–∞—Å–∫–∞",
            "–¥–∞": "—Ç–∞–∫",
            "–Ω–µ—Ç": "–Ω–µ",
            "—Ö–æ—Ä–æ—à–æ": "–¥–æ–±—Ä–∞",
            "–ø–ª–æ—Ö–æ": "–¥—Ä—ç–Ω–Ω–∞",
            "–∫–∞–∫ –¥–µ–ª–∞": "—è–∫ —Å–ø—Ä–∞–≤—ã",
            "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è": "–¥–∞ –ø–∞–±–∞—á—ç–Ω–Ω—è",
            "—É—Ç—Ä–æ": "—Ä–∞–Ω—ñ—Ü–∞",
            "–¥–µ–Ω—å": "–¥–∑–µ–Ω—å",
            "–≤–µ—á–µ—Ä": "–≤–µ—á–∞—Ä",
            "–Ω–æ—á—å": "–Ω–æ—á",
            "—Å–æ–ª–Ω—Ü–µ": "—Å–æ–Ω—Ü–∞",
            "–ª—É–Ω–∞": "–º–µ—Å—è—Ü",
            "–∑–≤–µ–∑–¥–∞": "–∑–æ—Ä–∫–∞",
            "–Ω–µ–±–æ": "–Ω–µ–±–∞",
            "–∑–µ–º–ª—è": "–∑—è–º–ª—è",
            "–≤–æ–¥–∞": "–≤–∞–¥–∞",
            "–æ–≥–æ–Ω—å": "–∞–≥–æ–Ω—å",
            "–≤–æ–∑–¥—É—Ö": "–ø–∞–≤–µ—Ç—Ä–∞",
            "–¥–µ—Ä–µ–≤–æ": "–¥—Ä—ç–≤–∞",
            "—Ü–≤–µ—Ç–æ–∫": "–∫–≤–µ—Ç–∫–∞",
            "—Ç—Ä–∞–≤–∞": "—Ç—Ä–∞–≤–∞",
            "–ª–∏—Å—Ç": "–ª—ñ—Å—Ç",
            "–∫–æ—Ä–µ–Ω—å": "–∫–æ—Ä–∞–Ω—å",
            "–≤–µ—Ç–∫–∞": "–≥–∞–ª—ñ–Ω–∞",
            "–ø–ª–æ–¥": "–ø–ª–æ–¥",
            "—Å–µ–º—è": "—Å–µ–º—è",
            "—Å—Ç–≤–æ–ª": "—Å—Ç–≤–æ–ª",
            "–∫–æ—Ä–∞": "–∫–∞—Ä–∞",
            "—Å–æ–∫": "—Å–æ–∫",
            "—Å–º–æ–ª–∞": "—Å–º–æ–ª–∞",
            "–ø—ã–ª—å—Ü–∞": "–ø—ã–ª–æ–∫",
            "–Ω–µ–∫—Ç–∞—Ä": "–Ω–µ–∫—Ç–∞—Ä",
            "–º–µ–¥": "–º—ë–¥",
            "–≤–æ—Å–∫": "–≤–æ—Å–∫",
            "–ø—á–µ–ª–∞": "–ø—á–∞–ª–∞",
            "–æ—Å–∞": "–∞—Å–∞",
            "—à–º–µ–ª—å": "—à–º–µ–ª—å",
            "–±–∞–±–æ—á–∫–∞": "–º–∞—Ç—ã–ª—ë–∫",
            "–∂—É–∫": "–∂—É–∫",
            "–ø–∞—É–∫": "–ø–∞–≤—É–∫",
            "–º—É—Ä–∞–≤–µ–π": "–º—É—Ä–∞—à–∫–∞",
            "–∫—É–∑–Ω–µ—á–∏–∫": "–∫–æ–Ω—ñ–∫",
            "—Å–≤–µ—Ä—á–æ–∫": "—Ü–≤—ã—Ä–∫—É–Ω",
            "—Ü–∏–∫–∞–¥–∞": "—Ü—ã–∫–∞–¥–∞",
            "—Å—Ç—Ä–µ–∫–æ–∑–∞": "—Å—Ç—Ä–∞–∫–æ–∑–∞",
            "–∫–æ–º–∞—Ä": "–∫–∞–º–∞—Ä",
            "–º—É—Ö–∞": "–º—É—Ö–∞",
            "–¥–µ–ª–∞": "—Å–ø—Ä–∞–≤—ã",
            "—Ä–∞–±–æ—Ç–∞": "–ø—Ä–∞—Ü–∞",
            "–¥–æ–º": "–¥–æ–º",
            "—Å–µ–º—å—è": "—Å—è–º'—è",
            "–¥—Ä—É–≥": "—Å—è–±–∞—Ä",
            "–ª—é–±–æ–≤—å": "–∫–∞—Ö–∞–Ω–Ω–µ",
            "—Å—á–∞—Å—Ç—å–µ": "—à—á–∞—Å—Ü–µ",
            "–≥—Ä—É—Å—Ç—å": "—Å—É–º",
            "—Ä–∞–¥–æ—Å—Ç—å": "—Ä–∞–¥–∞—Å—Ü—å",
            "—Å–º–µ—Ö": "—Å–º–µ—Ö",
            "–ø–ª–∞—á": "–ø–ª–∞—á",
            "—Å–æ–Ω": "—Å–æ–Ω",
            "–º–µ—á—Ç–∞": "–º–∞—Ä–∞",
            "–Ω–∞–¥–µ–∂–¥–∞": "–Ω–∞–¥–∑–µ—è",
            "–≤–µ—Ä–∞": "–≤–µ—Ä–∞",
            "–ø—Ä–∞–≤–¥–∞": "–ø—Ä–∞—û–¥–∞",
            "–ª–æ–∂—å": "—Ö–ª—É—Å–Ω—è",
            "–¥–æ–±—Ä–æ": "–¥–∞–±—Ä–æ",
            "–∑–ª–æ": "–∑–ª–æ",
            "–∫—Ä–∞—Å–æ—Ç–∞": "–ø—Ä—ã–≥–∞–∂–æ—Å—Ü—å",
            "—É—Ä–æ–¥—Å—Ç–≤–æ": "–±—Ä—ã–¥–æ—Ç–∞",
            "–º–æ–ª–æ–¥–æ—Å—Ç—å": "–º–∞–ª–∞–¥–æ—Å—Ü—å",
            "—Å—Ç–∞—Ä–æ—Å—Ç—å": "—Å—Ç–∞—Ä–∞—Å—Ü—å",
            "–∂–∏–∑–Ω—å": "–∂—ã—Ü—Ü—ë",
            "—Å–º–µ—Ä—Ç—å": "—Å–º–µ—Ä—Ü—å",
            "—Ä–æ–∂–¥–µ–Ω–∏–µ": "–Ω–∞—Ä–∞–¥–∂—ç–Ω–Ω–µ",
            "–≤–∑—Ä–æ—Å–ª–µ–Ω–∏–µ": "—É–∑—Ä–æ—Å—Ü–µ–Ω–Ω–µ",
            "–¥–µ—Ç—Å—Ç–≤–æ": "–¥–∑—è—Ü—ñ–Ω—Å—Ç–≤–∞",
            "—é–Ω–æ—Å—Ç—å": "—é–Ω–∞—Ü—Ç–≤–∞",
            "–∑—Ä–µ–ª–æ—Å—Ç—å": "—Å—Ç–∞–ª–∞—Å—Ü—å"
        }
    
    def translate_ru_to_be(self, text: str, max_len: int = 512) -> str:
        text = text.strip().lower()
        if not text:
            return ""
        
        # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if text in self.translations:
            return self.translations[text]
        
        # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for ru, be in self.translations.items():
            if ru in text:
                return f"–ß–∞—Å—Ç–∫–æ–≤—ã –ø–µ—Ä–∞–∫–ª–∞–¥: {be} (–¥–ª—è '{ru}')"
        
        return "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã —û –±–∞–∑–µ. –ü–∞—Å–ø—Ä–∞–±—É–π—Ü–µ —ñ–Ω—à—ã —Ç—ç–∫—Å—Ç."

translator: Optional[GoogleTranslator] = None
fallback_translator: Optional[FallbackTranslator] = None
translator_lock = threading.Lock()

# –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
translation_timers: Dict[int, threading.Timer] = {}
translation_lock = threading.Lock()

# –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
inline_timers: Dict[str, threading.Timer] = {}
inline_lock = threading.Lock()

def ensure_translator():
    global translator, fallback_translator
    
    if translator is None:
        with translator_lock:
            if translator is None:
                try:
                    translator = GoogleTranslator()
                    fallback_translator = FallbackTranslator()
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Translate: {e}")
                    print("–ò—Å–ø–æ–ª—å–∑—É—é fallback –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫...")
                    translator = None
                    fallback_translator = FallbackTranslator()
    
    return translator, fallback_translator

def delayed_translation(update: Update, context: CallbackContext, text: str, is_mention: bool = False, word_to_translate: str = ""):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    try:
        google_tr, fallback_tr = ensure_translator()
        
        if is_mention and word_to_translate:
            # –ü–µ—Ä–µ–≤–æ–¥ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '{word_to_translate}'")
            
            if google_tr:
                be = google_tr.translate_ru_to_be(word_to_translate)
                if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞") and not be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                    update.message.reply_text(f"'{word_to_translate}' ‚Üí '{be}'")
                    return
            
            # –ï—Å–ª–∏ Google –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            be = fallback_tr.translate_ru_to_be(word_to_translate)
            if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                be = "–ø–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"
            
            update.message.reply_text(f"'{word_to_translate}' ‚Üí '{be}'")
        else:
            # –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            print(f"üîç –ü–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç: '{text}'")
            
            if google_tr:
                be = google_tr.translate_ru_to_be(text)
                if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞") and not be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                    update.message.reply_text(be)
                    return
            
            # –ï—Å–ª–∏ Google –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            be = fallback_tr.translate_ru_to_be(text)
            if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                be = "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è. –ü–∞—Å–ø—Ä–∞–±—É–π—Ü–µ —ñ–Ω—à—ã —Ç—ç–∫—Å—Ç."
            
            update.message.reply_text(be)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        update.message.reply_text(f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É: {e}")

def schedule_translation(update: Update, context: CallbackContext, text: str, is_mention: bool = False, word_to_translate: str = ""):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫—É–Ω–¥—ã"""
    chat_id = update.message.chat_id
    
    with translation_lock:
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if chat_id in translation_timers:
            translation_timers[chat_id].cancel()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        timer = threading.Timer(2.0, delayed_translation, args=(update, context, text, is_mention, word_to_translate))
        translation_timers[chat_id] = timer
        timer.start()
        
        print(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}")

def delayed_inline_translation(update: Update, context: CallbackContext, query: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ–≤–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    try:
        google_tr, fallback_tr = ensure_translator()
        
        if google_tr:
            # –ü—Ä–æ–±—É–µ–º Google Translate
            be = google_tr.translate_ru_to_be(query)
            if be and not be.startswith("–ü–∞–º—ã–ª–∫–∞") and not be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
                results = [
                    InlineQueryResultArticle(
                        id=str(uuid4()),
                        title="–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é (Google)",
                        input_message_content=InputTextMessageContent(be),
                        description=be[:120]
                    )
                ]
                update.inline_query.answer(results, cache_time=0, is_personal=True)
                return
        
        # –ï—Å–ª–∏ Google –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        be = fallback_tr.translate_ru_to_be(query)
        if not be or be.startswith("–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã"):
            be = "–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–µ –∞—Ç—Ä—ã–º–∞—û—Å—è"
        
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü–µ—Ä–∞–∫–ª–∞–¥ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é (Fallback)",
                input_message_content=InputTextMessageContent(be),
                description=be[:120]
            )
        ]
        update.inline_query.answer(results, cache_time=0, is_personal=True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞–∫–ª–∞–¥—É",
                input_message_content=InputTextMessageContent(f"–ü–∞–º—ã–ª–∫–∞: {e}"),
                description="–ü—Ä–∞–≤–µ—Ä—Ü–µ —Ç—ç–∫—Å—Ç —ñ –ø–∞—Å–ø—Ä–∞–±—É–π—Ü–µ –∑–Ω–æ—û"
            )
        ]
        update.inline_query.answer(results, cache_time=0, is_personal=True)

def schedule_inline_translation(update: Update, context: CallbackContext, query: str):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ–≤–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1 —Å–µ–∫—É–Ω–¥–∞"""
    user_id = update.inline_query.from_user.id
    
    with inline_lock:
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in inline_timers:
            inline_timers[user_id].cancel()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        timer = threading.Timer(1.0, delayed_inline_translation, args=(update, context, query))
        inline_timers[user_id] = timer
        timer.start()
        
        print(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∏–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# –ö–æ–º–∞–Ω–¥—ã
def start(update: Update, context: CallbackContext):
    bot_username = context.bot.username
    msg = (
        "–ü—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ! –Ø –ø–µ—Ä–∞–∫–ª–∞–¥–∞—é –∑ —Ä—É—Å–∫–∞–π –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é –ø—Ä–∞–∑ Google Translate üåê\n\n"
        "üìù –°–ø–æ—Å–∞–±—ã –≤—ã–∫–∞—Ä—ã—Å—Ç–∞–Ω–Ω—è:\n"
        "‚Ä¢ –ù–∞–ø—ñ—à—ã—Ü–µ –º–Ω–µ —Ç—ç–∫—Å—Ç ‚Äî —è –∞–¥–∫–∞–∂—É –ø–µ—Ä–∞–∫–ª–∞–¥–∞–º –ø—Ä–∞–∑ 2 —Å–µ–∫—É–Ω–¥—ã.\n"
        "‚Ä¢ –£ –ª—é–±—ã–º —á–∞—Ü–µ —û–≤—è–¥–∑—ñ—Ü–µ: @"
        f"{bot_username} –≤–∞—à —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç ‚Äî —ñ —û—Å—Ç–∞—û—Ü–µ –≤—ã–Ω—ñ–∫.\n"
        f"‚Ä¢ –î–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É –∞–¥–Ω–∞–≥–æ —Å–ª–æ–≤–∞: –î–æ–±—Ä–∞–µ @{bot_username} —É—Ç—Ä–æ\n\n"
        "‚è∞ –ü–µ—Ä–∞–∫–ª–∞–¥ –∞–¥–±—ã–≤–∞–µ—Ü—Ü–∞ –ø—Ä–∞–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–∞—Å–ª—è –∞–ø–æ—à–Ω—è–≥–∞ —û–≤–æ–¥—É.\n"
        "–ö—Ä—ã–Ω—ñ—Ü–∞: Google Translate API.\n"
        "–£ –≤—ã–ø–∞–¥–∫—É –ø–∞–º—ã–ª–∫—ñ –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ fallback –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫.\n\n"
        "–ö–∞–º–∞–Ω–¥—ã:\n"
        "/start - –ø–∞—á–∞—Ç–∞–∫\n"
        "/help - –¥–∞–ø–∞–º–æ–≥–∞\n"
        "/status - —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫–∞"
    )
    update.message.reply_text(msg)

def help_cmd(update: Update, context: CallbackContext):
    bot_username = context.bot.username
    update.message.reply_text(
        "üìù –°–ø–æ—Å–∞–±—ã –≤—ã–∫–∞—Ä—ã—Å—Ç–∞–Ω–Ω—è:\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–∞–∫–ª–∞–¥ –ø–æ—û–Ω–∞–≥–∞ —Ç—ç–∫—Å—Ç—É:\n"
        "–ù–∞–ø—ñ—à—ã—Ü–µ –º–Ω–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç ‚Äî —è –∞–¥–∫–∞–∂—É –ø–µ—Ä–∞–∫–ª–∞–¥–∞–º –ø—Ä–∞–∑ 2 —Å–µ–∫—É–Ω–¥—ã.\n\n"
        "2Ô∏è‚É£ –Ü–Ω–ª–∞–π–Ω-—Ä—ç–∂—ã–º:\n"
        f"@{bot_username} –≤–∞—à —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç\n\n"
        f"3Ô∏è‚É£ –ü–µ—Ä–∞–∫–ª–∞–¥ –∞–¥–Ω–∞–≥–æ —Å–ª–æ–≤–∞:\n"
        f"–î–æ–±—Ä–∞–µ @{bot_username} —É—Ç—Ä–æ\n"
        f"–°–ø–∞—Å–∏–±–æ @{bot_username} –±–æ–ª—å—à–æ–µ\n\n"
        "‚è∞ –ü–µ—Ä–∞–∫–ª–∞–¥ –∞–¥–±—ã–≤–∞–µ—Ü—Ü–∞ –ø—Ä–∞–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–∞—Å–ª—è –∞–ø–æ—à–Ω—è–≥–∞ —û–≤–æ–¥—É.\n"
        "–ë–æ—Ç –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ Google Translate API –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É.\n"
        "–ö–∞–º–∞–Ω–¥—ã:\n"
        "/status - —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫–∞"
    )

def status_cmd(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"""
    global translator
    
    if translator:
        msg = "‚úÖ Google Translate –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫ –ø—Ä–∞—Ü—É–µ\n\n"
        msg += "üåê –ö—Ä—ã–Ω—ñ—Ü–∞: Google Translate API\n"
        msg += "‚ö° –•—É—Ç–∫–∞—Å—Ü—å: –æ–Ω–ª–∞–π–Ω –ø–µ—Ä–∞–∫–ª–∞–¥\n"
        msg += "üéØ –¢–æ—á–Ω–∞—Å—Ü—å: –≤—ã—Å–æ–∫–∞—è"
    else:
        msg = "‚ùå Google Translate –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫ –Ω–µ –¥–∞—Å—Ç—É–ø–Ω—ã\nüí° –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ fallback –ø–µ—Ä–∞–∫–ª–∞–¥—á—ã–∫"
    
    update.message.reply_text(msg)

# –ü–µ—Ä–µ–≤–æ–¥ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def on_text(update: Update, context: CallbackContext):
    text = update.message.text
    bot_username = context.bot.username
    
    print(f"üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: '{text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ entities (–¥–ª—è –≥—Ä—É–ø–ø)
    is_mentioned = False
    phrase_after_mention = ""
    
    if update.message.entities:
        for entity in update.message.entities:
            if entity.type == "mention":
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                mention_text = text[entity.offset:entity.offset + entity.length]
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '{mention_text}'")
                
                if f"@{bot_username}" in mention_text.lower():
                    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    text_after_mention = text[entity.offset + entity.length:].strip()
                    if text_after_mention:
                        phrase_after_mention = text_after_mention
                        is_mentioned = True
                        print(f"üîç –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: '{phrase_after_mention}'")
                        break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ entities, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    if not is_mentioned:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        mention_pattern = f"@{bot_username}\\s+(.+)"
        mention_match = re.search(mention_pattern, text, re.IGNORECASE)
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–µ–∑ @ (–¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤)
        simple_mention_pattern = f"{bot_username}\\s+(.+)"
        simple_mention_match = re.search(simple_mention_pattern, text, re.IGNORECASE)
        
        if mention_match:
            phrase_after_mention = mention_match.group(1).strip()
            is_mentioned = True
        elif simple_mention_match:
            phrase_after_mention = simple_mention_match.group(1).strip()
            is_mentioned = True
    
    if is_mentioned:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∏–∑ —Ñ—Ä–∞–∑—ã
        words = phrase_after_mention.split()
        word_to_translate = words[-1] if words else phrase_after_mention
        
        print(f"üîç –ü–ª–∞–Ω–∏—Ä—É—é –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: '{word_to_translate}' —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        schedule_translation(update, context, text, is_mention=True, word_to_translate=word_to_translate)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        print(f"üîç –ü–ª–∞–Ω–∏—Ä—É—é –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: '{text}' —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        schedule_translation(update, context, text, is_mention=False)

# –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º
def on_inline_query(update: Update, context: CallbackContext):
    query = (update.inline_query.query or "").strip()
    print(f"üîç –ò–ù–õ–ê–ô–ù –ó–ê–ü–†–û–°: '{query}'")
    
    if not query:
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–£–≤—è–¥–∑—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç",
                input_message_content=InputTextMessageContent("–£–≤—è–¥–∑—ñ—Ü–µ —Ä—É—Å–∫—ñ —Ç—ç–∫—Å—Ç –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É."),
                description="–Ø –ø–µ—Ä–∞–∫–ª–∞–¥—É –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫—É—é –ø—Ä–∞–∑ Google Translate"
            )
        ]
        update.inline_query.answer(results, cache_time=0, is_personal=True)
        return

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ–≤–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1 —Å–µ–∫—É–Ω–¥–∞
    print(f"üîç –ü–ª–∞–Ω–∏—Ä—É—é –∏–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ–≤–æ–¥: '{query}' —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É")
    schedule_inline_translation(update, context, query)

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")

def main():
    if not GOOGLE_AVAILABLE:
        print("‚ùå Google Translate –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install googletrans==4.0.0rc1")
        sys.exit(1)
    
    token = load_or_ask_token()
    
    # –°–æ–∑–¥–∞–µ–º Updater –¥–ª—è —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ API
    updater = Updater(token=token, use_context=True)
    dispatcher = updater.dispatcher
    
    print(f"üîß –¢–æ–∫–µ–Ω: {token[:10]}...")
    print(f"üîß Updater —Å–æ–∑–¥–∞–Ω")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_cmd))
    dispatcher.add_handler(CommandHandler("status", status_cmd))
    dispatcher.add_handler(InlineQueryHandler(on_inline_query))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, on_text))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dispatcher.add_error_handler(error_handler)

    print("üåê –ë–æ—Ç –ø–µ—Ä–∞–∫–ª–∞–¥—É –ø—Ä–∞–∑ Google Translate –∑–∞–ø—É—â–µ–Ω. –ù–∞–±–µ—Ä–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    print("üí° –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞—é Google Translate API –¥–ª—è –ø–µ—Ä–∞–∫–ª–∞–¥—É...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        updater.start_polling()
        updater.idle()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
