#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API —á–µ—Ä–µ–∑ requests
"""

import os
import json
import requests
from typing import Optional

def load_gemini_api_key() -> Optional[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Gemini API –∫–ª—é—á –∏–∑ .env —Ñ–∞–π–ª–∞"""
    api_key = os.environ.get("GEMINI_API_KEY")
    if api_key:
        return api_key.strip()

    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ .env
    if os.path.exists(".env"):
        with open(".env", "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith("GEMINI_API_KEY="):
                    api_key = line.split("=", 1)[1].strip()
                    if api_key:
                        return api_key
    return None

def test_gemini_model(api_key: str, model_name: str, text: str) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å Gemini"""
    url = f"https://generativelanguage.googleapis.com/v1beta/models/{model_name}:generateContent"
    
    headers = {
        'Content-Type': 'application/json',
        'X-goog-api-key': api_key
    }
    
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": text
                    }
                ]
            }
        ]
    }
    
    try:
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é {model_name}...")
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if 'candidates' in result and len(result['candidates']) > 0:
                content = result['candidates'][0]['content']['parts'][0]['text']
                print(f"‚úÖ {model_name}: {content}")
                return True
            else:
                print(f"‚ùå {model_name}: –ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
        else:
            print(f"‚ùå {model_name}: HTTP {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå {model_name}: –û—à–∏–±–∫–∞ - {e}")
        return False

def main():
    print("ü§ñ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    api_key = load_gemini_api_key()
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ GEMINI_API_KEY=your_api_key –≤ .env —Ñ–∞–π–ª")
        return
    
    print(f"üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models = [
        "gemini-2.0-flash",
        "gemini-1.5-flash", 
        "gemini-1.5-pro",
        "gemini-pro"
    ]
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    test_text = "–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ \"–ø—Ä–∏–≤–µ—Ç\" –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º."
    
    print(f"\nüìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {test_text}")
    print("\n" + "=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
    working_model = None
    for model in models:
        if test_gemini_model(api_key, model, test_text):
            working_model = model
            break
        print()
    
    if working_model:
        print(f"\nüéâ –†–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {working_model}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ä–∞–±–æ—á–µ–π –º–æ–¥–µ–ª—å—é
        print(f"\nüîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å {working_model}:")
        test_texts = [
            "–ö–∞–∫ –¥–µ–ª–∞?",
            "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ",
            "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
            "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è"
        ]
        
        for text in test_texts:
            prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ \"{text}\" –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º."
            test_gemini_model(api_key, working_model, prompt)
    else:
        print("\n‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞")

if __name__ == "__main__":
    main()
